//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: James (Dev Agent)
// Created: 2025-09-04
// UpdateIssueStatusCommand: Command for updating issue status with workflow validation
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using FluentValidation;
using MediatR;
using CleanArchitecture.Blazor.Application.Common.Interfaces;
using CleanArchitecture.Blazor.Application.Common.Models;
using CleanArchitecture.Blazor.Application.Features.Issues.Caching;
using CleanArchitecture.Blazor.Domain.Enums;

namespace CleanArchitecture.Blazor.Application.Features.Issues.Commands.UpdateIssueStatus;

public class UpdateIssueStatusCommand : ICacheInvalidatorRequest<Result<Unit>>
{
    public required Guid IssueId { get; set; }
    public required IssueStatus NewStatus { get; set; }
    public string? Reason { get; set; }
    
    public IEnumerable<string>? Tags => IssueCacheKey.Tags;
}

public class UpdateIssueStatusCommandValidator : AbstractValidator<UpdateIssueStatusCommand>
{
    public UpdateIssueStatusCommandValidator()
    {
        RuleFor(x => x.IssueId)
            .NotEmpty()
            .WithMessage("Issue ID is required.");
            
        RuleFor(x => x.NewStatus)
            .IsInEnum()
            .WithMessage("Valid status is required.");
            
        RuleFor(x => x.Reason)
            .MaximumLength(500)
            .When(x => !string.IsNullOrEmpty(x.Reason))
            .WithMessage("Reason cannot exceed 500 characters.");
    }
}