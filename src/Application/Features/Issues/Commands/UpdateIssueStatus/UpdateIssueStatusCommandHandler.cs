//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: James (Dev Agent)
// Created: 2025-09-04
// UpdateIssueStatusCommandHandler: Handles issue status updates with audit logging
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using Microsoft.EntityFrameworkCore;
using MediatR;
using CleanArchitecture.Blazor.Application.Common.Interfaces;
using CleanArchitecture.Blazor.Application.Common.Models;
using CleanArchitecture.Blazor.Application.Common.Interfaces.Identity;
using CleanArchitecture.Blazor.Domain.Entities;
using CleanArchitecture.Blazor.Domain.Enums;
using System.Text.Json;

namespace CleanArchitecture.Blazor.Application.Features.Issues.Commands.UpdateIssueStatus;

public class UpdateIssueStatusCommandHandler : IRequestHandler<UpdateIssueStatusCommand, Result<Unit>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IUserContextAccessor _userContextAccessor;
    
    public UpdateIssueStatusCommandHandler(
        IApplicationDbContextFactory dbContextFactory,
        IUserContextAccessor userContextAccessor
    )
    {
        _dbContextFactory = dbContextFactory;
        _userContextAccessor = userContextAccessor;
    }
    
    public async Task<Result<Unit>> Handle(UpdateIssueStatusCommand request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        
        var currentUser = _userContextAccessor.Current;
        if (currentUser?.TenantId == null)
        {
            return await Result<Unit>.FailureAsync("Tenant context not found.");
        }
        
        var issue = await db.Issues
            .Where(i => i.Id == request.IssueId && i.TenantId == currentUser.TenantId)
            .FirstOrDefaultAsync(cancellationToken);
            
        if (issue == null)
        {
            return await Result<Unit>.FailureAsync($"Issue with id: [{request.IssueId}] not found.");
        }
        
        var oldStatus = issue.Status;
        
        // Validate status transition
        if (!IsValidStatusTransition(oldStatus, request.NewStatus))
        {
            return await Result<Unit>.FailureAsync($"Invalid status transition from {oldStatus} to {request.NewStatus}.");
        }
        
        issue.Status = request.NewStatus;
        issue.LastModified = DateTime.UtcNow;
        issue.LastModifiedBy = currentUser.UserId;
        
        // Create audit log entry
        var eventLog = new EventLog
        {
            Id = Guid.NewGuid(),
            IssueId = issue.Id,
            Type = "status_changed",
            Payload = JsonSerializer.Serialize(new
            {
                OldStatus = oldStatus.ToString(),
                NewStatus = request.NewStatus.ToString(),
                Reason = request.Reason
            }),
            CreatedUtc = DateTime.UtcNow,
            CreatedBy = currentUser.UserId,
            TenantId = currentUser.TenantId
        };
        
        db.EventLogs.Add(eventLog);
        
        try
        {
            await db.SaveChangesAsync(cancellationToken);
            return await Result<Unit>.SuccessAsync(Unit.Value);
        }
        catch (Exception ex)
        {
            return await Result<Unit>.FailureAsync($"Failed to update issue status: {ex.Message}");
        }
    }
    
    private static bool IsValidStatusTransition(IssueStatus currentStatus, IssueStatus newStatus)
    {
        // Define valid status transitions
        return (currentStatus, newStatus) switch
        {
            (IssueStatus.New, IssueStatus.InProgress) => true,
            (IssueStatus.New, IssueStatus.Resolved) => true,
            (IssueStatus.New, IssueStatus.Closed) => true,
            (IssueStatus.InProgress, IssueStatus.Resolved) => true,
            (IssueStatus.InProgress, IssueStatus.New) => true,
            (IssueStatus.InProgress, IssueStatus.Closed) => true,
            (IssueStatus.Resolved, IssueStatus.Closed) => true,
            (IssueStatus.Resolved, IssueStatus.InProgress) => true,
            (IssueStatus.Closed, IssueStatus.InProgress) => true,
            _ => currentStatus == newStatus // Allow same status (no-op)
        };
    }
}