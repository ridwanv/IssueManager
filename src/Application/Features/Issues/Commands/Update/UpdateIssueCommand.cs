//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-01-15
// UpdateIssueCommand & handler: updates an existing Issue with cache invalidation and raises IssueUpdatedEvent.
// Docs: https://docs.cleanarchitectureblazor.com/features/issues
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using System.ComponentModel;
using AutoMapper;
using MediatR;
using CleanArchitecture.Blazor.Application.Common.Interfaces;
using CleanArchitecture.Blazor.Application.Features.Issues.DTOs;
using CleanArchitecture.Blazor.Application.Features.Issues.Caching;
using CleanArchitecture.Blazor.Application.Common.Models;
using CleanArchitecture.Blazor.Domain.Entities;
using CleanArchitecture.Blazor.Domain.Enums;

namespace CleanArchitecture.Blazor.Application.Features.Issues.Commands.Update;

public class UpdateIssueCommand : ICacheInvalidatorRequest<Result<Guid>>
{
    [Description("Id")]
    public Guid Id { get; set; }
    
    [Description("Title")]
    public string Title { get; set; } = default!;
    
    [Description("Description")]
    public string Description { get; set; } = default!;
    
    [Description("Category")]
    public IssueCategory Category { get; set; }
    
    [Description("Priority")]
    public IssuePriority Priority { get; set; }
    
    [Description("Status")]
    public IssueStatus Status { get; set; }
    
    [Description("Reporter Contact Id")]
    public int? ReporterContactId { get; set; }
    
    [Description("Channel")]
    public string? Channel { get; set; }
    
    [Description("Product")]
    public string? Product { get; set; }
    
    [Description("Severity")]
    public string? Severity { get; set; }
    
    [Description("Summary")]
    public string? Summary { get; set; }
    
    [Description("Consent Flag")]
    public bool ConsentFlag { get; set; }
    
    [Description("Duplicate Of Id")]
    public Guid? DuplicateOfId { get; set; }

    public string CacheKey => IssueCacheKey.GetAllCacheKey;
    public IEnumerable<string>? Tags => IssueCacheKey.Tags;

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<UpdateIssueCommand, Issue>(MemberList.None)
                .ForMember(dest => dest.ReferenceNumber, opt => opt.Ignore())
                .ForMember(dest => dest.ReporterContact, opt => opt.Ignore())
                .ForMember(dest => dest.DuplicateOf, opt => opt.Ignore())
                .ForMember(dest => dest.Attachments, opt => opt.Ignore())
                .ForMember(dest => dest.EventLogs, opt => opt.Ignore())
                .ForMember(dest => dest.TenantId, opt => opt.Ignore())
                .ForMember(dest => dest.SourceMessageIds, opt => opt.Ignore())
                .ForMember(dest => dest.WhatsAppMetadata, opt => opt.Ignore())
                .ForMember(dest => dest.ReporterName, opt => opt.Ignore())
                .ForMember(dest => dest.ReporterPhone, opt => opt.Ignore());
                
            CreateMap<IssueDto, UpdateIssueCommand>(MemberList.None);
        }
    }
}

public class UpdateIssueCommandHandler : IRequestHandler<UpdateIssueCommand, Result<Guid>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;
    
    public UpdateIssueCommandHandler(
        IApplicationDbContextFactory dbContextFactory,
        IMapper mapper
    )
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
    }
    
    public async Task<Result<Guid>> Handle(UpdateIssueCommand request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        
        var item = await db.Issues.FindAsync(new object[] { request.Id }, cancellationToken);
        if (item == null) 
        {
            return await Result<Guid>.FailureAsync($"Issue with id: [{request.Id}] not found.");
        }
        
        _mapper.Map(request, item);
        await db.SaveChangesAsync(cancellationToken);
        
        return await Result<Guid>.SuccessAsync(item.Id);
    }
}