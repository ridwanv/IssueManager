//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-01-15
// DeleteIssueCommand & handler: deletes an Issue with cache invalidation and raises IssueDeletedEvent.
// Docs: https://docs.cleanarchitectureblazor.com/features/issues
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using System.ComponentModel;
using MediatR;
using CleanArchitecture.Blazor.Application.Common.Interfaces;
using CleanArchitecture.Blazor.Application.Features.Issues.Caching;
using CleanArchitecture.Blazor.Application.Common.Models;

namespace CleanArchitecture.Blazor.Application.Features.Issues.Commands.Delete;

public class DeleteIssueCommand : ICacheInvalidatorRequest<Result<Guid>>
{
    [Description("Id")]
    public Guid Id { get; set; }
    
    public string CacheKey => IssueCacheKey.GetAllCacheKey;
    public IEnumerable<string>? Tags => IssueCacheKey.Tags;
}

public class DeleteIssueCommandHandler : IRequestHandler<DeleteIssueCommand, Result<Guid>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    
    public DeleteIssueCommandHandler(
        IApplicationDbContextFactory dbContextFactory
    )
    {
        _dbContextFactory = dbContextFactory;
    }
    
    public async Task<Result<Guid>> Handle(DeleteIssueCommand request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        
        var item = await db.Issues.FindAsync(new object[] { request.Id }, cancellationToken);
        if (item == null)
        {
            return await Result<Guid>.FailureAsync($"Issue with id: [{request.Id}] not found.");
        }
        
        db.Issues.Remove(item);
        await db.SaveChangesAsync(cancellationToken);
        
        return await Result<Guid>.SuccessAsync(item.Id);
    }
}