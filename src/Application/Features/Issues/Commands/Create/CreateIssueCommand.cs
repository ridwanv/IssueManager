//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-01-15
// CreateIssueCommand & handler: creates a new Issue with cache invalidation and raises IssueCreatedEvent.
// Docs: https://docs.cleanarchitectureblazor.com/features/issues
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using System.ComponentModel;
using AutoMapper;
using CleanArchitecture.Blazor.Application.Common.Interfaces;
using CleanArchitecture.Blazor.Application.Features.Issues.DTOs;
using CleanArchitecture.Blazor.Application.Features.Issues.Caching;
using CleanArchitecture.Blazor.Application.Common.Interfaces.Identity;
using CleanArchitecture.Blazor.Domain.Entities;
using CleanArchitecture.Blazor.Domain.Enums;
using CleanArchitecture.Blazor.Application.Common.Models;
using MediatR;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using CleanArchitecture.Blazor.Application.Features.Issues.Commands.LinkIssues;

namespace CleanArchitecture.Blazor.Application.Features.Issues.Commands.Create;

public class CreateIssueCommand : ICacheInvalidatorRequest<Result<Guid>>
{
    [Description("Title")]
    public string Title { get; set; } = default!;
    
    [Description("Description")]
    public string Description { get; set; } = default!;
    
    [Description("Category")]
    public IssueCategory Category { get; set; }
    
    [Description("Priority")]
    public IssuePriority Priority { get; set; }
    
    [Description("Status")]
    public IssueStatus Status { get; set; } = IssueStatus.New;
    
    [Description("Reporter Contact Id")]
    public int? ReporterContactId { get; set; }
    
    [Description("Reporter Phone")]
    public string? ReporterPhone { get; set; }
    
    [Description("Reporter Name")]
    public string? ReporterName { get; set; }
    
    [Description("Channel")]
    public string? Channel { get; set; }
    
    [Description("Product")]
    public string? Product { get; set; }
    
    [Description("Severity")]
    public string? Severity { get; set; }
    
    [Description("Summary")]
    public string? Summary { get; set; }
    
    [Description("Consent Flag")]
    public bool ConsentFlag { get; set; } = true;
    
    public string CacheKey => IssueCacheKey.GetAllCacheKey;
    public IEnumerable<string>? Tags => IssueCacheKey.Tags;

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<CreateIssueCommand, Issue>(MemberList.None)
                .ForMember(dest => dest.Id, opt => opt.Ignore())
                .ForMember(dest => dest.ReferenceNumber, opt => opt.Ignore())
                .ForMember(dest => dest.ReporterContact, opt => opt.Ignore())
                .ForMember(dest => dest.DuplicateOf, opt => opt.Ignore())
                .ForMember(dest => dest.Attachments, opt => opt.Ignore())
                .ForMember(dest => dest.EventLogs, opt => opt.Ignore())
                .ForMember(dest => dest.TenantId, opt => opt.Ignore());
        }
    }
}

public class CreateIssueCommandHandler : IRequestHandler<CreateIssueCommand, Result<Guid>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;
    private readonly IIssueReferenceNumberService _referenceNumberService;
    private readonly IUserContextAccessor _userContextAccessor;
    private readonly IIssueSimilarityService _similarityService;
    private readonly IMediator _mediator;

    public CreateIssueCommandHandler(
        IApplicationDbContextFactory dbContextFactory,
        IMapper mapper,
        IIssueReferenceNumberService referenceNumberService,
        IUserContextAccessor userContextAccessor,
        IIssueSimilarityService similarityService,
        IMediator mediator
    )
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
        _referenceNumberService = referenceNumberService;
        _userContextAccessor = userContextAccessor;
        _similarityService = similarityService;
        _mediator = mediator;
    }

    public async Task<Result<Guid>> Handle(CreateIssueCommand request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        
        // Generate unique reference number
        var referenceNumber = await _referenceNumberService.GenerateReferenceNumberAsync(cancellationToken);
        
        // Get current user context
        var currentUser = _userContextAccessor.Current;
        
        // Handle contact creation/validation
        Contact? reporterContact = null;
        if (request.ReporterContactId.HasValue)
        {
            // Validate existing contact ID
            reporterContact = await db.Contacts.FirstOrDefaultAsync(c => c.Id == request.ReporterContactId.Value, cancellationToken);
            if (reporterContact == null)
            {
                return await Result<Guid>.FailureAsync($"Reporter Contact with ID {request.ReporterContactId} does not exist.");
            }
        }
        else if (!string.IsNullOrWhiteSpace(request.ReporterPhone))
        {
            // Find or create contact by phone
            reporterContact = await FindOrCreateContactAsync(db, request.ReporterPhone, request.ReporterName, currentUser?.TenantId ?? "0dd39f35-8404-40b2-82f7-34412a927035", cancellationToken);
        }
        
        // Create issue from command
        var issue = _mapper.Map<Issue>(request);
        issue.Id = Guid.NewGuid();
        issue.ReferenceNumber = referenceNumber;
        issue.TenantId = currentUser?.TenantId ?? "0dd39f35-8404-40b2-82f7-34412a927035";
        
        // Set the reporter contact if found/created
        if (reporterContact != null)
        {
            issue.ReporterContactId = reporterContact.Id;
            issue.ReporterContact = reporterContact;
        }
        
        // Add issue to database first
        db.Issues.Add(issue);
        await db.SaveChangesAsync(cancellationToken);

        // Check for similar issues within the past 24 hours (1 day)
        var similarIssues = await _similarityService.FindSimilarIssuesAsync(
            issue.Title, 
            issue.Description, 
            issue.Category, 
            issue.Priority, 
            issue.Product, 
            issue.TenantId,
            timeframeHours: 24, // Past day only
            confidenceThreshold: 0.75m, // Lower threshold for more matches
            cancellationToken);

        // Automatically link highly similar issues
        foreach (var similar in similarIssues.Where(s => s.ConfidenceScore >= 0.85m))
        {
            try
            {
                // Analyze relationship type
                var recommendation = await _similarityService.AnalyzeRelationshipAsync(
                    similar.Issue, 
                    issue, 
                    similar.ConfidenceScore, 
                    cancellationToken);

                // Auto-link if recommended and confidence is high enough
                if (recommendation.ShouldAutoLink && similar.ConfidenceScore >= 0.85m)
                {
                    var linkCommand = new LinkIssuesCommand
                    {
                        ParentIssueId = similar.Issue.Id,
                        ChildIssueId = issue.Id,
                        LinkType = recommendation.RecommendedLinkType,
                        ConfidenceScore = similar.ConfidenceScore,
                        CreatedBySystem = true,
                        Reason = $"Automatic linking based on similarity analysis: {similar.Reasoning}",
                        Metadata = JsonSerializer.Serialize(new
                        {
                            SimilarityScore = similar.ConfidenceScore,
                            AnalysisReasoning = similar.Reasoning,
                            AutoLinked = true,
                            LinkedAt = DateTime.UtcNow
                        })
                    };

                    await _mediator.Send(linkCommand, cancellationToken);
                }
            }
            catch (Exception)
            {
                // Log error but don't fail issue creation
                // This will be logged through the mediator pipeline
            }
        }
        
        // Create initial event log entry for issue creation after issue is saved
        var eventLog = new EventLog
        {
            Id = Guid.NewGuid(),
            IssueId = issue.Id,
            Type = "created",
            Payload = JsonSerializer.Serialize(new
            {
                Title = issue.Title,
                Category = issue.Category.ToString(),
                Priority = issue.Priority.ToString(),
                Status = issue.Status.ToString(),
                Channel = issue.Channel
            }),
            CreatedUtc = DateTime.UtcNow,
            CreatedBy = currentUser?.UserId,
            TenantId = issue.TenantId
        };
        
        // Add event log and save
        db.EventLogs.Add(eventLog);
        await db.SaveChangesAsync(cancellationToken);
        
        return await Result<Guid>.SuccessAsync(issue.Id);
    }
    
    private async Task<Contact> FindOrCreateContactAsync(IApplicationDbContext db, string phone, string? name, string tenantId, CancellationToken cancellationToken)
    {
        // Try to find existing contact by phone number (with tenant isolation)
        var existingContact = await db.Contacts
            .FirstOrDefaultAsync(c => c.PhoneNumber == phone, cancellationToken);
            
        if (existingContact != null)
        {
            // Update name if provided and different
            if (!string.IsNullOrWhiteSpace(name) && existingContact.Name != name)
            {
                existingContact.Name = name;
                existingContact.LastModified = DateTime.UtcNow;
            }
            return existingContact;
        }
        
        // Create new contact
        var newContact = new Contact
        {
            PhoneNumber = phone,
            Name = name,
            Description = "Auto-created from issue intake",
            TenantId = tenantId
        };
        
        db.Contacts.Add(newContact);
        return newContact;
    }
}