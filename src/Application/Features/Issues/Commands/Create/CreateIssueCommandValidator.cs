//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-01-15
// CreateIssueCommandValidator: validates CreateIssueCommand properties.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using FluentValidation;
using CleanArchitecture.Blazor.Application.Common.Interfaces;
using Microsoft.EntityFrameworkCore;

namespace CleanArchitecture.Blazor.Application.Features.Issues.Commands.Create;

public class CreateIssueCommandValidator : AbstractValidator<CreateIssueCommand>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;

    public CreateIssueCommandValidator(IApplicationDbContextFactory dbContextFactory)
    {
        _dbContextFactory = dbContextFactory;
        
        RuleFor(v => v.Title)
            .NotEmpty()
            .MaximumLength(200)
            .WithMessage("Title is required and must not exceed 200 characters.");
            
        RuleFor(v => v.Description)
            .NotEmpty()
            .MaximumLength(2000)
            .WithMessage("Description is required and must not exceed 2000 characters.");
            
        RuleFor(v => v.Category)
            .IsInEnum()
            .WithMessage("Category must be a valid value.");
            
        RuleFor(v => v.Priority)
            .IsInEnum()
            .WithMessage("Priority must be a valid value.");
            
        RuleFor(v => v.Status)
            .IsInEnum()
            .WithMessage("Status must be a valid value.");
            
        RuleFor(v => v.ReporterContactId)
            .MustAsync(BeValidContactId)
            .WithMessage("Reporter Contact ID must reference an existing contact.")
            .When(v => v.ReporterContactId.HasValue);
            
        RuleFor(v => v.ReporterPhone)
            .Matches(@"^\+?[1-9]\d{1,14}$")
            .WithMessage("Reporter Phone must be a valid phone number.")
            .When(v => !string.IsNullOrWhiteSpace(v.ReporterPhone));
            
        RuleFor(v => v.ReporterName)
            .MaximumLength(100)
            .WithMessage("Reporter Name must not exceed 100 characters.")
            .When(v => !string.IsNullOrWhiteSpace(v.ReporterName));
    }
    
    private async Task<bool> BeValidContactId(int? contactId, CancellationToken cancellationToken)
    {
        if (!contactId.HasValue) return true;
        
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        return await db.Contacts.AnyAsync(c => c.Id == contactId.Value, cancellationToken);
    }
}