//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: James (Dev Agent)
// Created: 2025-09-04
// AddInternalNoteCommandHandler: Handles internal note creation with user tracking
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using AutoMapper;
using Microsoft.EntityFrameworkCore;
using MediatR;
using CleanArchitecture.Blazor.Application.Common.Interfaces;
using CleanArchitecture.Blazor.Application.Common.Models;
using CleanArchitecture.Blazor.Application.Common.Interfaces.Identity;
using CleanArchitecture.Blazor.Application.Features.Issues.DTOs;
using CleanArchitecture.Blazor.Domain.Entities;

namespace CleanArchitecture.Blazor.Application.Features.Issues.Commands.AddInternalNote;

public class AddInternalNoteCommandHandler : IRequestHandler<AddInternalNoteCommand, Result<InternalNoteDto>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IUserContextAccessor _userContextAccessor;
    private readonly IMapper _mapper;
    
    public AddInternalNoteCommandHandler(
        IApplicationDbContextFactory dbContextFactory,
        IUserContextAccessor userContextAccessor,
        IMapper mapper
    )
    {
        _dbContextFactory = dbContextFactory;
        _userContextAccessor = userContextAccessor;
        _mapper = mapper;
    }
    
    public async Task<Result<InternalNoteDto>> Handle(AddInternalNoteCommand request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        
        var currentUser = _userContextAccessor.Current;
        if (currentUser?.TenantId == null)
        {
            return await Result<InternalNoteDto>.FailureAsync("Tenant context not found.");
        }
        
        // Verify issue exists and belongs to tenant
        var issueExists = await db.Issues
            .Where(i => i.Id == request.IssueId && i.TenantId == currentUser.TenantId)
            .AnyAsync(cancellationToken);
            
        if (!issueExists)
        {
            return await Result<InternalNoteDto>.FailureAsync($"Issue with id: [{request.IssueId}] not found.");
        }
        
        var internalNote = new InternalNote
        {
            Id = Guid.NewGuid(),
            IssueId = request.IssueId,
            Content = request.Content,
            CreatedByUserId = currentUser.UserId,
            CreatedAt = DateTime.UtcNow,
            TenantId = currentUser.TenantId,
            Created = DateTime.UtcNow,
            CreatedBy = currentUser.UserId
        };
        
        db.InternalNotes.Add(internalNote);
        
        try
        {
            await db.SaveChangesAsync(cancellationToken);
            
            var noteDto = _mapper.Map<InternalNoteDto>(internalNote);
            // TODO: Set CreatedByUserName from user lookup
            
            return await Result<InternalNoteDto>.SuccessAsync(noteDto);
        }
        catch (Exception ex)
        {
            return await Result<InternalNoteDto>.FailureAsync($"Failed to add internal note: {ex.Message}");
        }
    }
}