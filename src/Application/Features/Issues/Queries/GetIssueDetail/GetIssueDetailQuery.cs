//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: James (Dev Agent)
//     Created Date: 2025-09-04
//     Last Modified: 2025-09-04
//     Description: 
//       Defines a query to retrieve comprehensive issue details by ID with related data.
//       Supports caching for performance optimization and includes tenant filtering.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using AutoMapper;
using AutoMapper.QueryableExtensions;
using Microsoft.EntityFrameworkCore;
using MediatR;
using CleanArchitecture.Blazor.Application.Common.Interfaces;
using CleanArchitecture.Blazor.Application.Features.Issues.DTOs;
using CleanArchitecture.Blazor.Application.Features.Issues.Caching;
using CleanArchitecture.Blazor.Application.Common.Models;
using CleanArchitecture.Blazor.Application.Common.Interfaces.Identity;

namespace CleanArchitecture.Blazor.Application.Features.Issues.Queries.GetIssueDetail;

public class GetIssueDetailQuery : ICacheableRequest<Result<IssueDetailDto>>
{
    public required Guid Id { get; set; }
    public string CacheKey => IssueCacheKey.GetDetailCacheKey($"{Id}");
    public IEnumerable<string>? Tags => IssueCacheKey.Tags;
}

public class GetIssueDetailQueryHandler : IRequestHandler<GetIssueDetailQuery, Result<IssueDetailDto>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;
    private readonly IUserContextAccessor _userContextAccessor;
    
    public GetIssueDetailQueryHandler(
        IApplicationDbContextFactory dbContextFactory,
        IMapper mapper,
        IUserContextAccessor userContextAccessor
    )
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
        _userContextAccessor = userContextAccessor;
    }

    public async Task<Result<IssueDetailDto>> Handle(GetIssueDetailQuery request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        
        var currentUser = _userContextAccessor.Current;
        if (currentUser?.TenantId == null)
        {
            return await Result<IssueDetailDto>.FailureAsync("Tenant context not found.");
        }
        
        var issueQuery = db.Issues
            .Where(i => i.Id == request.Id && i.TenantId == currentUser.TenantId)
            .Include(i => i.ReporterContact)
            .Include(i => i.Attachments)
            .Include(i => i.EventLogs)
            .Include(i => i.InternalNotes)
            .AsSplitQuery();
            
        var issue = await issueQuery.FirstOrDefaultAsync(cancellationToken);
            
        if (issue == null)
        {
            return await Result<IssueDetailDto>.FailureAsync($"Issue with id: [{request.Id}] not found.");
        }
        
        var issueDetailDto = _mapper.Map<IssueDetailDto>(issue);
        
        // Map collections manually for better control
        issueDetailDto.Attachments = _mapper.Map<List<AttachmentDto>>(issue.Attachments);
        issueDetailDto.EventLogs = _mapper.Map<List<EventLogDto>>(issue.EventLogs
            .OrderByDescending(el => el.CreatedUtc));
        issueDetailDto.InternalNotes = _mapper.Map<List<InternalNoteDto>>(issue.InternalNotes
            .OrderByDescending(n => n.CreatedAt));
        
        // Product name is stored directly as a string field
        issueDetailDto.ProductName = issue.Product;
        
        // NOTE: AssignedUserName mapping would require a separate user lookup service
        // to maintain clean architecture separation between Application and Infrastructure layers
        
        return await Result<IssueDetailDto>.SuccessAsync(issueDetailDto);
    }
}