//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-01-15
//     Last Modified: 2025-01-15
//     Description: 
//       Defines a query to retrieve an issue by its ID. The result is cached 
//       to optimize performance for repeated retrievals of the same issue.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using AutoMapper;
using AutoMapper.QueryableExtensions;
using Microsoft.EntityFrameworkCore;
using MediatR;
using CleanArchitecture.Blazor.Application.Common.Interfaces;
using CleanArchitecture.Blazor.Application.Features.Issues.DTOs;
using CleanArchitecture.Blazor.Application.Features.Issues.Caching;
using CleanArchitecture.Blazor.Application.Common.Models;

namespace CleanArchitecture.Blazor.Application.Features.Issues.Queries.GetById;

public class GetIssueByIdQuery : ICacheableRequest<Result<IssueDto>>
{
   public required Guid Id { get; set; }
   public string CacheKey => IssueCacheKey.GetByIdCacheKey($"{Id}");
   public IEnumerable<string>? Tags => IssueCacheKey.Tags;
}

public class GetIssueByIdQueryHandler : IRequestHandler<GetIssueByIdQuery, Result<IssueDto>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;
    
    public GetIssueByIdQueryHandler(
        IApplicationDbContextFactory dbContextFactory,
        IMapper mapper
    )
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
    }

    public async Task<Result<IssueDto>> Handle(GetIssueByIdQuery request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        
        var issue = await db.Issues
            .Include(i => i.ReporterContact)
            .Where(i => i.Id == request.Id)
            .ProjectTo<IssueDto>(_mapper.ConfigurationProvider)
            .FirstOrDefaultAsync(cancellationToken);
            
        if (issue == null)
        {
            return await Result<IssueDto>.FailureAsync($"Issue with id: [{request.Id}] not found.");
        }
        
        return await Result<IssueDto>.SuccessAsync(issue);
    }
}