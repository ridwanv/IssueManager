//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-09-04
//     Last Modified: 2025-09-04
//     Description: 
//       Defines a query for retrieving issues with pagination and filtering 
//       options. The result is cached to enhance performance for repeated queries.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Features.Issues.DTOs;
using CleanArchitecture.Blazor.Application.Features.Issues.Caching;
using CleanArchitecture.Blazor.Application.Features.Issues.Specifications;

namespace CleanArchitecture.Blazor.Application.Features.Issues.Queries.GetIssues;

public class GetIssuesQuery : IssueAdvancedFilter, ICacheableRequest<PaginatedData<IssueListDto>>
{
    public override string ToString()
    {
        return $"ListView:{ListView}:{CurrentUser?.UserId}, Search:{Keyword}, Status:{StatusFilter}, Priority:{PriorityFilter}, Category:{CategoryFilter}, {OrderBy}, {SortDirection}, {PageNumber}, {PageSize}";
    }
    
    public string CacheKey => IssueCacheKey.GetPaginationCacheKey($"{this}");
    public IEnumerable<string>? Tags => IssueCacheKey.Tags;
    public IssueAdvancedSpecification Specification => new IssueAdvancedSpecification(this);
}
    
public class GetIssuesQueryHandler : IRequestHandler<GetIssuesQuery, PaginatedData<IssueListDto>>
{
    private readonly IApplicationDbContextFactory _dbContextFactory;
    private readonly IMapper _mapper;
    
    public GetIssuesQueryHandler(
        IApplicationDbContextFactory dbContextFactory,
        IMapper mapper
    )
    {
        _dbContextFactory = dbContextFactory;
        _mapper = mapper;
    }

    public async Task<PaginatedData<IssueListDto>> Handle(GetIssuesQuery request, CancellationToken cancellationToken)
    {
        await using var db = await _dbContextFactory.CreateAsync(cancellationToken);
        
        var data = await db.Issues.OrderBy($"{request.OrderBy} {request.SortDirection}")
            .ProjectToPaginatedDataAsync<Issue, IssueListDto>(
                request.Specification, 
                request.PageNumber, 
                request.PageSize, 
                _mapper.ConfigurationProvider, 
                cancellationToken);
        
        return data;
    }
}