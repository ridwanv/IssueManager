//------------------------------------------------------------------------------
// <auto-generated>
//     This file is part of the CleanArchitecture.Blazor project.
//     Licensed to the .NET Foundation under the MIT license.
//     See the LICENSE file in the project root for more information.
//
//     Author: neozhu
//     Created Date: 2025-09-04
//     Last Modified: 2025-09-04
//     Description: 
//       Defines a specification for applying advanced filtering options to the 
//       Issue entity, supporting different views, status filters, priority filters,
//       category filters, and keyword-based searches.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using CleanArchitecture.Blazor.Application.Common.Extensions;
using CleanArchitecture.Blazor.Domain.Entities;
using CleanArchitecture.Blazor.Domain.Enums;

namespace CleanArchitecture.Blazor.Application.Features.Issues.Specifications;

#nullable disable warnings
/// <summary>
/// Specification class for advanced filtering of Issues.
/// </summary>
public class IssueAdvancedSpecification : Specification<Issue>
{
    public IssueAdvancedSpecification(IssueAdvancedFilter filter)
    {
        DateTime today = DateTime.UtcNow;
        var localTimeOffset = filter.CurrentUser?.LocalTimeOffset ?? TimeSpan.Zero;
        var todayRange = today.GetDateRange(IssueListView.TODAY.ToString(), localTimeOffset);
        var last7DaysRange = today.GetDateRange(IssueListView.LAST_7_DAYS.ToString(), localTimeOffset);
        var last30DaysRange = today.GetDateRange(IssueListView.LAST_30_DAYS.ToString(), localTimeOffset);

        // Include related data for efficient queries
        Query.Include(x => x.ReporterContact);

        // Basic filters - ensure we have a valid issue with a title
        Query.Where(q => q.Title != null && q.Title != string.Empty);

        // Keyword search across multiple fields
        if (!string.IsNullOrEmpty(filter.Keyword))
        {
            Query.Where(x => x.Title.Contains(filter.Keyword) ||
                           x.Description.Contains(filter.Keyword) ||
                           x.ReferenceNumber.Contains(filter.Keyword) ||
                           (x.ReporterContact != null && x.ReporterContact.Name!.Contains(filter.Keyword)) ||
                           (x.ReporterName != null && x.ReporterName.Contains(filter.Keyword)));
        }

        // Reference Number filter
        if (!string.IsNullOrEmpty(filter.ReferenceNumber))
        {
            Query.Where(x => x.ReferenceNumber.Contains(filter.ReferenceNumber));
        }

        // Reporter Name filter
        if (!string.IsNullOrEmpty(filter.ReporterName))
        {
            Query.Where(x => (x.ReporterContact != null && x.ReporterContact.Name!.Contains(filter.ReporterName)) ||
                           (x.ReporterName != null && x.ReporterName.Contains(filter.ReporterName)));
        }

        // Status Filter
        if (filter.StatusFilter.HasValue)
        {
            Query.Where(x => x.Status == filter.StatusFilter.Value);
        }

        // Priority Filter
        if (filter.PriorityFilter.HasValue)
        {
            Query.Where(x => x.Priority == filter.PriorityFilter.Value);
        }

        // Category Filter
        if (filter.CategoryFilter.HasValue)
        {
            Query.Where(x => x.Category == filter.CategoryFilter.Value);
        }

        // Date Range Filters
        if (filter.DateRangeStart.HasValue)
        {
            Query.Where(x => x.Created >= filter.DateRangeStart.Value);
        }

        if (filter.DateRangeEnd.HasValue)
        {
            Query.Where(x => x.Created <= filter.DateRangeEnd.Value.AddDays(1).AddSeconds(-1));
        }

        // List View Filters
        switch (filter.ListView)
        {
            case IssueListView.MyAssigned:
                if (filter.CurrentUser is not null)
                {
                    Query.Where(q => q.AssignedUserId == filter.CurrentUser.UserId);
                }
                break;

            case IssueListView.MyReported:
                if (filter.CurrentUser is not null)
                {
                    Query.Where(q => q.CreatedBy == filter.CurrentUser.UserId);
                }
                break;

            case IssueListView.Open:
                Query.Where(x => x.Status == IssueStatus.New || x.Status == IssueStatus.InProgress);
                break;

            case IssueListView.Closed:
                Query.Where(x => x.Status == IssueStatus.Resolved || x.Status == IssueStatus.Closed);
                break;

            case IssueListView.TODAY:
                Query.Where(x => x.Created >= todayRange.Start && x.Created < todayRange.End.AddDays(1));
                break;

            case IssueListView.LAST_7_DAYS:
                Query.Where(x => x.Created >= last7DaysRange.Start);
                break;

            case IssueListView.LAST_30_DAYS:
                Query.Where(x => x.Created >= last30DaysRange.Start);
                break;

            case IssueListView.All:
            default:
                // No additional filters for "All" view
                break;
        }

        // Future: Assignment filter (when user assignment is implemented)
        // if (!string.IsNullOrEmpty(filter.AssignedUserFilter))
        // {
        //     Query.Where(x => x.AssignedUserId == filter.AssignedUserFilter);
        // }
    }
}