//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: neozhu
// Created/Modified: 2025-01-15
// IssueDto: transfers detailed issue data for CRUD operations.
// Docs: https://docs.cleanarchitectureblazor.com/features/issues
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using System.ComponentModel;
using AutoMapper;
using CleanArchitecture.Blazor.Domain.Entities;
using CleanArchitecture.Blazor.Domain.Enums;
using System;

namespace CleanArchitecture.Blazor.Application.Features.Issues.DTOs;

[Description("Issue")]
public class IssueDto
{
    [Description("Id")]
    public Guid Id { get; set; }
    
    [Description("Reference Number")]
    public string ReferenceNumber { get; set; } = default!;
    
    [Description("Title")]
    public string Title { get; set; } = default!;
    
    [Description("Description")]
    public string Description { get; set; } = default!;
    
    [Description("Category")]
    public IssueCategory Category { get; set; }
    
    [Description("Priority")]
    public IssuePriority Priority { get; set; }
    
    [Description("Status")]
    public IssueStatus Status { get; set; }
    
    [Description("Reporter Contact Id")]
    public int? ReporterContactId { get; set; }
    
    [Description("Conversation Id")]
    public int? ConversationId { get; set; }
    
    [Description("Reporter Name")]
    public string? ReporterName { get; set; }
    
    [Description("Reporter Phone")]
    public string? ReporterPhone { get; set; }
    
    [Description("Channel")]
    public string? Channel { get; set; }
    
    [Description("Product")]
    public string? Product { get; set; }
    
    [Description("Severity")]
    public string? Severity { get; set; }
    
    [Description("Summary")]
    public string? Summary { get; set; }
    
    [Description("Source Message Ids")]
    public string? SourceMessageIds { get; set; }
    
    [Description("WhatsApp Metadata")]
    public string? WhatsAppMetadata { get; set; }
    
    [Description("Consent Flag")]
    public bool ConsentFlag { get; set; }
    
    [Description("Duplicate Of Id")]
    public Guid? DuplicateOfId { get; set; }
    
    [Description("Tenant Id")]
    public string TenantId { get; set; } = default!;
    
    [Description("Created Date")]
    public DateTime? Created { get; set; }
    
    [Description("Created By")]
    public string? CreatedBy { get; set; }
    
    [Description("Last Modified Date")]
    public DateTime? LastModified { get; set; }
    
    [Description("Last Modified By")]
    public string? LastModifiedBy { get; set; }
    
    // JIRA Integration
    [Description("JIRA Key")]
    public string? JiraKey { get; set; }
    
    [Description("JIRA URL")]
    public string? JiraUrl { get; set; }
    
    [Description("JIRA Last Sync")]
    public DateTime? JiraLastSyncAt { get; set; }

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<Issue, IssueDto>(MemberList.None)
                .ForMember(dest => dest.ReporterName, opt => opt.MapFrom(src => 
                    src.ReporterContact != null ? src.ReporterContact.Name : src.ReporterName))
                .ForMember(dest => dest.ReporterPhone, opt => opt.MapFrom(src => 
                    src.ReporterContact != null ? src.ReporterContact.PhoneNumber : src.ReporterPhone));
                    
            CreateMap<IssueDto, Issue>(MemberList.None)
                .ForMember(dest => dest.ReporterContact, opt => opt.Ignore())
                .ForMember(dest => dest.Conversation, opt => opt.Ignore())
                .ForMember(dest => dest.DuplicateOf, opt => opt.Ignore())
                .ForMember(dest => dest.Attachments, opt => opt.Ignore())
                .ForMember(dest => dest.EventLogs, opt => opt.Ignore());
        }
    }
}