//------------------------------------------------------------------------------
// <auto-generated>
// CleanArchitecture.Blazor - MIT Licensed.
// Author: James (Dev Agent)
// Created: 2025-09-04
// IssueDetailDto: Comprehensive DTO for detailed issue view with related data
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
#nullable disable warnings

using System.ComponentModel;
using AutoMapper;
using CleanArchitecture.Blazor.Domain.Entities;
using CleanArchitecture.Blazor.Domain.Enums;
using CleanArchitecture.Blazor.Application.Features.Contacts.DTOs;

namespace CleanArchitecture.Blazor.Application.Features.Issues.DTOs;

[Description("Issue Detail")]
public class IssueDetailDto
{
    [Description("Id")]
    public Guid Id { get; set; }
    
    [Description("Reference Number")]
    public string ReferenceNumber { get; set; } = default!;
    
    [Description("Title")]
    public string Title { get; set; } = default!;
    
    [Description("Description")]
    public string Description { get; set; } = default!;
    
    [Description("Category")]
    public IssueCategory Category { get; set; }
    
    [Description("Priority")]
    public IssuePriority Priority { get; set; }
    
    [Description("Status")]
    public IssueStatus Status { get; set; }
    
    [Description("Reporter Contact")]
    public ContactDto? ReporterContact { get; set; }
    
    [Description("Conversation Id")]
    public int? ConversationId { get; set; }
    
    [Description("Conversation Reference")]
    public string? ConversationReference { get; set; }
    
    [Description("Assigned User Id")]
    public string? AssignedUserId { get; set; }
    
    [Description("Assigned User Name")]
    public string? AssignedUserName { get; set; }
    
    [Description("Product Name")]
    public string? ProductName { get; set; }
    
    [Description("Source Message Ids")]
    public string? SourceMessageIds { get; set; }
    
    [Description("WhatsApp Metadata")]
    public string? WhatsAppMetadata { get; set; }
    
    [Description("Consent Flag")]
    public bool ConsentFlag { get; set; }
    
    [Description("Channel")]
    public string? Channel { get; set; }
    
    [Description("Duplicate Of Id")]
    public Guid? DuplicateOfId { get; set; }
    
    [Description("Tenant Id")]
    public string TenantId { get; set; } = default!;
    
    [Description("Created Date")]
    public DateTime? Created { get; set; }
    
    [Description("Created By")]
    public string? CreatedBy { get; set; }
    
    [Description("Last Modified Date")]
    public DateTime? LastModified { get; set; }
    
    [Description("Last Modified By")]
    public string? LastModifiedBy { get; set; }
    
    [Description("Attachments")]
    public List<AttachmentDto> Attachments { get; set; } = new();
    
    [Description("Event Logs")]
    public List<EventLogDto> EventLogs { get; set; } = new();
    
    [Description("Internal Notes")]
    public List<InternalNoteDto> InternalNotes { get; set; } = new();

    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<Issue, IssueDetailDto>(MemberList.None)
                .ForMember(dest => dest.AssignedUserName, opt => opt.Ignore()) // Will be set via projection
                .ForMember(dest => dest.ProductName, opt => opt.Ignore()); // Will be set via projection
        }
    }
}

[Description("Attachment")]
public class AttachmentDto
{
    [Description("Id")]
    public Guid Id { get; set; }
    
    [Description("Issue Id")]
    public Guid IssueId { get; set; }
    
    [Description("Uri")]
    public string Uri { get; set; } = default!;
    
    [Description("Type")]
    public string Type { get; set; } = default!;
    
    [Description("Size in Bytes")]
    public long SizeBytes { get; set; }
    
    [Description("Virus Scan Status")]
    public string ScanStatus { get; set; } = default!;
    
    [Description("Created Date")]
    public DateTime CreatedUtc { get; set; }
    
    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<Attachment, AttachmentDto>(MemberList.None);
        }
    }
}

[Description("Event Log")]
public class EventLogDto
{
    [Description("Id")]
    public Guid Id { get; set; }
    
    [Description("Issue Id")]
    public Guid IssueId { get; set; }
    
    [Description("Event Type")]
    public string Type { get; set; } = default!;
    
    [Description("Event Payload")]
    public string Payload { get; set; } = default!;
    
    [Description("Created Date")]
    public DateTime CreatedUtc { get; set; }
    
    [Description("Created By")]
    public string? CreatedBy { get; set; }
    
    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<EventLog, EventLogDto>(MemberList.None);
        }
    }
}

[Description("Internal Note")]
public class InternalNoteDto
{
    [Description("Id")]
    public Guid Id { get; set; }
    
    [Description("Issue Id")]
    public Guid IssueId { get; set; }
    
    [Description("Content")]
    public string Content { get; set; } = default!;
    
    [Description("Created By User Id")]
    public string CreatedByUserId { get; set; } = default!;
    
    [Description("Created By User Name")]
    public string? CreatedByUserName { get; set; }
    
    [Description("Created At")]
    public DateTime CreatedAt { get; set; }
    
    [Description("Tenant Id")]
    public string TenantId { get; set; } = default!;
    
    private class Mapping : Profile
    {
        public Mapping()
        {
            CreateMap<InternalNote, InternalNoteDto>(MemberList.None)
                .ForMember(dest => dest.CreatedByUserName, opt => opt.Ignore()); // Will be set via projection
        }
    }
}