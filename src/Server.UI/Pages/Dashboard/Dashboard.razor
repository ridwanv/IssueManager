@page "/"
@using CleanArchitecture.Blazor.Server.UI.Pages.Dashboard.Components
@using CleanArchitecture.Blazor.Application.Features.Issues.Queries.GetDashboardMetrics
@using CleanArchitecture.Blazor.Application.Features.Issues.Queries.GetRecentActivity  
@using CleanArchitecture.Blazor.Application.Features.Issues.Queries.GetPerformanceStats
@using CleanArchitecture.Blazor.Server.UI.Components.Security
@using CleanArchitecture.Blazor.Domain.Enums
@using DashboardFiltersModel = CleanArchitecture.Blazor.Server.UI.Models.DashboardFiltersModel
@implements IAsyncDisposable

@inject IStringLocalizer<Dashboard> L
@inject IMediator Mediator
@inject ISnackbar Snackbar

<PageTitle>@Title</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <MudStack Spacing="4">
        <!-- Dashboard Header -->
        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-2">
            <MudStack Row AlignItems="AlignItems.Center" Spacing="3">
                <MudIcon Icon="@Icons.Material.Filled.Dashboard" Color="Color.Primary" Size="Size.Large" />
                <MudStack Spacing="0">
                    <MudText Typo="Typo.h4" Class="font-weight-bold">@L["Issue Management Dashboard"]</MudText>
                    <MudText Typo="Typo.body2" Class="text-muted">
                        @L["Real-time overview of your issue management system"]
                    </MudText>
                </MudStack>
            </MudStack>
            
            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                @if (_lastRefreshed.HasValue)
                {
                    <MudText Typo="Typo.caption" Class="text-muted">
                        @L["Updated: {0}", _lastRefreshed.Value.ToString("HH:mm:ss")]
                    </MudText>
                }
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Primary"
                          StartIcon="@Icons.Material.Filled.Refresh"
                          OnClick="RefreshDashboard"
                          Disabled="@_loading"
                          Size="Size.Small">
                    @(_loading ? L["Refreshing..."] : L["Refresh"])
                </MudButton>
            </MudStack>
        </MudStack>

@*         <!-- Dashboard Filters -->
        <DashboardFilters Filters="_filters" 
                         FiltersChanged="OnFiltersChanged"
                         AutoRefreshChanged="OnAutoRefreshChanged" /> *@

        <!-- Loading State -->
        @if (_loading && _dashboardMetrics == null)
        {
            <MudStack Spacing="3">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="150px" />
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="300px" />
            </MudStack>
        }
        else
        {
            <!-- KPI Metrics Cards -->
            <IssueMetricsCard Metrics="_dashboardMetrics" />

            <!-- Main Dashboard Grid - Simplified -->
            <MudGrid>
                <MudItem xs="12" md="8">
                    <IssueStatusBoard Metrics="_dashboardMetrics" OnRefreshClick="RefreshDashboard" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <RealTimeActivityFeed OnViewIssue="ViewIssueDetails" />
                </MudItem>
            </MudGrid>
        }

        <!-- Footer -->
        <MudDivider Class="my-4" />
        <MudStack Row Justify="Justify.Center" AlignItems="AlignItems.Center" Spacing="2">
            <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Color="Color.Info" />
            <MudText Typo="Typo.caption" Class="text-muted">
                @L["Dashboard data is refreshed every {0} when auto-refresh is enabled", "30 seconds"]
            </MudText>
        </MudStack>
    </MudStack>
</MudContainer>

@code {
    public string Title { get; set; } = "Dashboard";

    private DashboardMetricsDto? _dashboardMetrics;
    private PerformanceStatsDto? _performanceStats;
    private DashboardFiltersModel _filters = new();
    private bool _loading = true;
    private DateTime? _lastRefreshed;
    private Timer? _refreshTimer;
    private readonly int _refreshIntervalMs = 30000; // 30 seconds

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Title = L?["Issue Management Dashboard"] ?? "Issue Management Dashboard";
            await LoadDashboardData();
            // Only start auto refresh if data loaded successfully
            if (_dashboardMetrics != null || _performanceStats != null)
            {
                StartAutoRefresh();
            }
        }
        catch (Exception ex)
        {
            // Ensure the component renders even if initialization fails
            Snackbar?.Add($"Dashboard initialization warning: {ex.Message}", Severity.Warning);
        }
    }

    private async Task LoadDashboardData()
    {
        try
        {
            _loading = true;
            StateHasChanged();

            // Load dashboard metrics
            var metricsQuery = new GetDashboardMetricsQuery();
            var metricsResult = await Mediator.Send(metricsQuery);
            if (metricsResult.Succeeded)
            {
                _dashboardMetrics = metricsResult.Data;
            }

            // Load performance stats  
            var statsQuery = new GetPerformanceStatsQuery(GetDaysFromTimeRange(_filters.TimeRange));
            var statsResult = await Mediator.Send(statsQuery);
            if (statsResult.Succeeded)
            {
                _performanceStats = statsResult.Data;
            }

            _lastRefreshed = DateTime.UtcNow;
        }
        catch (Exception ex)
        {
            // Don't crash the component, just show a warning
            Snackbar?.Add($"Error loading dashboard: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshDashboard()
    {
        await LoadDashboardData();
    }

    private async Task OnFiltersChanged(DashboardFiltersModel newFilters)
    {
        _filters = newFilters;
        await LoadDashboardData();
    }

    private void OnAutoRefreshChanged(bool autoRefresh)
    {
        if (autoRefresh)
        {
            StartAutoRefresh();
        }
        else
        {
            StopAutoRefresh();
        }
    }

    private void StartAutoRefresh()
    {
        try
        {
            if (_filters?.AutoRefresh != true) return;

            _refreshTimer?.Dispose();
            _refreshTimer = new Timer(async _ =>
            {
                try
                {
                    await InvokeAsync(LoadDashboardData);
                }
                catch (Exception ex)
                {
                    // Don't crash the timer
                    await InvokeAsync(() => Snackbar?.Add($"Auto-refresh failed: {ex.Message}", Severity.Warning));
                }
            }, null, _refreshIntervalMs, _refreshIntervalMs);
        }
        catch (Exception ex)
        {
            Snackbar?.Add($"Auto-refresh setup failed: {ex.Message}", Severity.Warning);
        }
    }

    private void StopAutoRefresh()
    {
        _refreshTimer?.Dispose();
        _refreshTimer = null;
    }

    private async Task ViewIssueDetails(Guid issueId)
    {
        // Navigate to issue details page
        // This would typically use Navigation.NavigateTo($"/issues/{issueId}")
        Snackbar.Add($"Navigating to issue {issueId}", Severity.Info);
    }

    private int GetDaysFromTimeRange(string timeRange) => timeRange switch
    {
        "7d" => 7,
        "30d" => 30,
        "90d" => 90,
        "today" => 1,
        "yesterday" => 2,
        "this_week" => 7,
        "last_week" => 14,
        _ => 30
    };

    private string GetPeakHour()
    {
        if (_performanceStats?.HourlyDistribution == null || !_performanceStats.HourlyDistribution.Any())
            return "--:--";
            
        var peakHour = _performanceStats.HourlyDistribution
            .OrderByDescending(h => h.Value)
            .FirstOrDefault();
            
        return peakHour?.Label ?? "--:--";
    }

    private string GetTopCategory()
    {
        if (_dashboardMetrics?.CategoryDistribution == null || !_dashboardMetrics.CategoryDistribution.Any())
            return L["N/A"];
            
        var topCategory = _dashboardMetrics.CategoryDistribution
            .OrderByDescending(kv => kv.Value)
            .FirstOrDefault();
            
        return topCategory.Key.ToString();
    }

    public async ValueTask DisposeAsync()
    {
        StopAutoRefresh();
        _refreshTimer?.Dispose();
    }
}

<style>
    .font-weight-bold {
        font-weight: 700;
    }

    .text-muted {
        opacity: 0.7;
    }

    .dashboard-container {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
    }


</style>