@page "/pages/agents"
@using CleanArchitecture.Blazor.Application.Features.Agents.DTOs
@using CleanArchitecture.Blazor.Application.Features.Agents.Queries.GetAll
@using CleanArchitecture.Blazor.Application.Features.Agents.Commands.ConvertUser
@using CleanArchitecture.Blazor.Application.Features.Agents.Commands.UpdateStatus
@using CleanArchitecture.Blazor.Application.Features.Identity.DTOs
@using CleanArchitecture.Blazor.Domain.Enums
@using CleanArchitecture.Blazor.Application.Common.Security
@using CleanArchitecture.Blazor.Domain.Identity
@using Microsoft.AspNetCore.Identity
@using CleanArchitecture.Blazor.Application.Common.Constants
@using MudBlazor

@* Temporarily removed authorization to test page access *@
@* @attribute [Authorize(Policy = Permissions.Agents.View)] *@
@inject IStringLocalizer<Agents> L
@inject UserManager<ApplicationUser> UserManager
@inject IServiceScopeFactory ServiceScopeFactory

<PageTitle>@Title</PageTitle>

<MudDataGrid ServerData="@(ServerReload)"
             FixedHeader="true"
             FixedFooter="false"
             Loading="@_loading"
             @bind-RowsPerPage="_defaultPageSize"
             MultiSelection="true"
             @bind-SelectedItems="_selectedItems"
             Hover="true" @ref="_agentGrid">
    <ToolBarContent>
        <MudStack Row Spacing="0" Class="flex-grow-1" Justify="Justify.SpaceBetween">
            <!-- Left Toolbar: Icon and Title -->
            <MudStack Row AlignItems="AlignItems.Start">
                <MudIcon Icon="@Icons.Material.Filled.SupportAgent" Size="Size.Large" />
                <MudStack Spacing="0">
                    <MudText Typo="Typo.subtitle2" Class="mb-2">@Title</MudText>
                </MudStack>
            </MudStack>

            <!-- Right Toolbar: Actions -->
            <MudStack Spacing="0" AlignItems="AlignItems.End">
                <MudToolBar Dense WrapContent="true" Class="py-1 px-0">
                    <MudButton Disabled="@_loading"
                               OnClick="OnRefresh"
                               StartIcon="@Icons.Material.Outlined.Refresh">
                        @ConstantString.Refresh
                    </MudButton>
                    @if (_accessRights.ConvertUser)
                    {
                        <MudButton StartIcon="@Icons.Material.Filled.PersonAdd"
                                   OnClick="OnConvertDemoUser">
                            @L["Convert Demo User"]
                        </MudButton>
                    }
                </MudToolBar>
            </MudStack>
        </MudStack>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="AgentDto" />
        <PropertyColumn Property="x => x.User!.UserName" Title="@L["User Name"]">
            <CellTemplate>
                <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                    @if (!string.IsNullOrEmpty(context.Item.User?.ProfilePictureDataUrl))
                    {
                        <MudAvatar Size="Size.Small">
                            <MudImage Src="@context.Item.User.ProfilePictureDataUrl" />
                        </MudAvatar>
                    }
                    else
                    {
                        <MudAvatar Size="Size.Small" Color="Color.Primary">
                            @context.Item.User?.UserName?.ToUpper().FirstOrDefault()
                        </MudAvatar>
                    }
                    <MudText>@context.Item.User?.UserName</MudText>
                </MudStack>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.User!.Email" Title="@L["Email"]" />
        <PropertyColumn Property="x => x.Status" Title="@L["Status"]">
            <CellTemplate>
                <MudChip Color="@GetStatusColor(context.Item.Status)" 
                         Size="Size.Small" 
                         Icon="@GetStatusIcon(context.Item.Status)">
                    @context.Item.Status.ToString()
                </MudChip>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.ActiveConversationCount" Title="@L["Active Conversations"]">
            <CellTemplate>
                <MudText>@context.Item.ActiveConversationCount / @context.Item.MaxConcurrentConversations</MudText>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Priority" Title="@L["Priority"]">
            <CellTemplate>
                <MudRating ReadOnly="true" SelectedValue="@context.Item.Priority" MaxValue="5" Size="Size.Small" />
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.LastActiveAt" Title="@L["Last Active"]">
            <CellTemplate>
                @if (context.Item.LastActiveAt.HasValue)
                {
                    <MudText>@context.Item.LastActiveAt.Value.ToString("MMM dd, HH:mm")</MudText>
                }
                else
                {
                    <MudText Color="Color.Secondary">@L["Never"]</MudText>
                }
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.SkillsList" Title="@L["Skills"]">
            <CellTemplate>
                <MudText Style="max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                    @context.Item.SkillsList
                </MudText>
            </CellTemplate>
        </PropertyColumn>
        <TemplateColumn CellClass="d-flex justify-end" Title="@L["Actions"]" Sortable="false">
            <CellTemplate>
                <MudStack Row Spacing="1">
                    @if (_accessRights.ManageStatus)
                    {
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                            @foreach (AgentStatus status in Enum.GetValues<AgentStatus>())
                            {
                                @if (status != context.Item.Status)
                                {
                                    <MudMenuItem OnClick="@(() => UpdateAgentStatus(context.Item.Id, status))">
                                        <MudStack Row Spacing="2" AlignItems="AlignItems.Center">
                                            <MudIcon Icon="@GetStatusIcon(status)" Size="Size.Small" />
                                            <MudText>@L[$"Set {status}"]</MudText>
                                        </MudStack>
                                    </MudMenuItem>
                                }
                            }
                        </MudMenu>
                    }
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager PageSizeOptions="@(new[] { 10, 15, 30, 50, 100 })" />
    </PagerContent>
</MudDataGrid>

@code {
    #region Fields and Properties

    private string Title => L["Agents"];
    private bool _loading;
    private int _defaultPageSize = 15;
    private HashSet<AgentDto> _selectedItems = new();
    private MudDataGrid<AgentDto> _agentGrid = null!;
    private AgentsAccessRights _accessRights = new();

    #endregion

    #region Lifecycle

    protected override async Task OnInitializedAsync()
    {
        _accessRights = await PermissionService.GetAccessRightsAsync<AgentsAccessRights>();
    }

    #endregion

    #region Data Loading

    private async Task<GridData<AgentDto>> ServerReload(GridState<AgentDto> state)
    {
        _loading = true;
        try
        {
            var result = await Mediator.Send(new GetAllAgentsQuery());
            
            var agents = result.Data ?? new List<AgentDto>();
            
            // Apply sorting
            if (state.SortDefinitions.Any())
            {
                var sortDef = state.SortDefinitions.First();
                agents = sortDef.Descending
                    ? agents.OrderByDescending(GetSortValue(sortDef.SortBy)).ToList()
                    : agents.OrderBy(GetSortValue(sortDef.SortBy)).ToList();
            }

            // Apply paging
            var pagedAgents = agents
                .Skip(state.Page * state.PageSize)
                .Take(state.PageSize)
                .ToList();

            return new GridData<AgentDto>
            {
                Items = pagedAgents,
                TotalItems = agents.Count
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading agents: {ex.Message}", Severity.Error);
            return new GridData<AgentDto> { Items = new List<AgentDto>(), TotalItems = 0 };
        }
        finally
        {
            _loading = false;
        }
    }

    private Func<AgentDto, object> GetSortValue(string sortBy)
    {
        return sortBy.ToLower() switch
        {
            "user.username" => x => x.User?.UserName ?? "",
            "user.email" => x => x.User?.Email ?? "",
            "status" => x => x.Status,
            "activeconversationcount" => x => x.ActiveConversationCount,
            "priority" => x => x.Priority,
            "lastactiveat" => x => x.LastActiveAt ?? DateTime.MinValue,
            _ => x => x.Id
        };
    }

    #endregion

    #region UI Helpers

    private Color GetStatusColor(AgentStatus status)
    {
        return status switch
        {
            AgentStatus.Available => Color.Success,
            AgentStatus.Busy => Color.Warning,
            AgentStatus.Break => Color.Info,
            AgentStatus.Training => Color.Secondary,
            AgentStatus.Offline => Color.Default,
            _ => Color.Default
        };
    }

    private string GetStatusIcon(AgentStatus status)
    {
        return status switch
        {
            AgentStatus.Available => Icons.Material.Filled.CheckCircle,
            AgentStatus.Busy => Icons.Material.Filled.Schedule,
            AgentStatus.Break => Icons.Material.Filled.Coffee,
            AgentStatus.Training => Icons.Material.Filled.School,
            AgentStatus.Offline => Icons.Material.Filled.RadioButtonUnchecked,
            _ => Icons.Material.Filled.HelpOutline
        };
    }

    #endregion

    #region Actions

    private async Task OnRefresh()
    {
        await _agentGrid.ReloadServerData();
    }

    private async Task OnConvertDemoUser()
    {
        try
        {
            // Find the demo user (assuming username is 'demo' or similar)
            var demoUser = await UserManager.FindByNameAsync("demo@example.com");
            
            if (demoUser == null)
            {
                Snackbar.Add(L["Demo user not found. Please ensure there's a user with username 'demo@example.com'"], Severity.Warning);
                return;
            }

            var command = new ConvertUserToAgentCommand(
                demoUser.Id,
                MaxConcurrentConversations: 5,
                Priority: 1,
                Skills: "Technical Support, Customer Service",
                Notes: "Converted from demo user for testing purposes");

            var result = await Mediator.Send(command);

            if (result.Succeeded)
            {
                await _agentGrid.ReloadServerData();
                Snackbar.Add(L["Demo user successfully converted to agent"], Severity.Success);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error converting demo user: {ex.Message}", Severity.Error);
        }
    }

    private async Task UpdateAgentStatus(int agentId, AgentStatus newStatus)
    {
        try
        {
            var command = new UpdateAgentStatusCommand(agentId, newStatus);
            var result = await Mediator.Send(command);

            if (result.Succeeded)
            {
                await _agentGrid.ReloadServerData();
                Snackbar.Add(L[$"Agent status updated to {newStatus}"], Severity.Success);
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating agent status: {ex.Message}", Severity.Error);
        }
    }

    #endregion
}
