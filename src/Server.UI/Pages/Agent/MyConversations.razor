@page "/agent/my-conversations"
@using CleanArchitecture.Blazor.Application.Features.Conversations.DTOs
@using CleanArchitecture.Blazor.Application.Features.Conversations.Queries.GetMyActiveConversations
@using CleanArchitecture.Blazor.Domain.Enums
@using CleanArchitecture.Blazor.Application.Common.Security
@using CleanArchitecture.Blazor.Server.UI.Components.Shared
@using CleanArchitecture.Blazor.Server.UI.Components.Conversations
@using CleanArchitecture.Blazor.Server.UI.Services.SignalR
@attribute [Authorize]
@inject IMediator Mediator
@inject IStringLocalizer<SharedResource> L
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SignalRConnectionService SignalRService
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<PageTitle>@L["My Conversations"]</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="relative">
    <div class="d-flex flex-column flex-grow-1 gap-4">
        <div class="d-flex align-center justify-space-between">
            <div class="d-flex align-center gap-4">
                <MudIcon Icon="@Icons.Material.Filled.PersonalVideo" Style="font-size:2rem;" />
                <MudText Typo="Typo.h5">@L["My Conversations"]</MudText>
                @if (conversations?.TotalItems > 0)
                {
                    <MudChip T="string" Size="Size.Small" Color="Color.Primary">
                        @conversations.TotalItems @(conversations.TotalItems == 1 ? L["conversation"] : L["conversations"])
                    </MudChip>
                }
            </div>
            <div class="d-flex align-center gap-2">
                <MudTextField @bind-Value="searchString"
                             Placeholder="@L["Search my conversations..."]"
                             Adornment="Adornment.Start"
                             AdornmentIcon="@Icons.Material.Filled.Search"
                             IconSize="Size.Medium"
                             Immediate="true"
                             DebounceInterval="300"
                             OnDebounceIntervalElapsed="OnSearch"
                             Class="flex-grow-0"
                             Style="min-width: 300px;" />
@*                 <MudSelect @bind-Value="selectedStatus"
                          Label="@L["Status"]"
                          Class="flex-grow-0"
                          Style="min-width: 150px;"
                          OnSelectionChanged="OnStatusChanged">
                    <MudSelectItem Value="@((ConversationStatus?)null)">@L["All Active"]</MudSelectItem>
                    <MudSelectItem Value="ConversationStatus.Active">@L["Active"]</MudSelectItem>
                </MudSelect>
                <MudSelect @bind-Value="selectedPriority"
                          Label="@L["Priority"]"
                          Class="flex-grow-0"
                          Style="min-width: 150px;"
                          OnSelectionChanged="OnPriorityChanged">
                    <MudSelectItem Value="@((int?)null)">@L["All Priorities"]</MudSelectItem>
                    <MudSelectItem Value="1">@L["Standard"]</MudSelectItem>
                    <MudSelectItem Value="2">@L["High"]</MudSelectItem>
                    <MudSelectItem Value="3">@L["Critical"]</MudSelectItem>
                </MudSelect> *@
            </div>
        </div>

        @if (loading)
        {
            <div class="d-flex justify-center align-center" style="height: 200px;">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else if (conversations?.Items?.Any() == true)
        {
            <MudGrid Spacing="3">
                @foreach (var conversation in conversations.Items)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <ConversationCard Conversation="@conversation" />
                    </MudItem>
                }
            </MudGrid>

            @if (conversations.TotalItems > conversations.Items.Count())
            {
                <div class="d-flex justify-center mt-4">
                    <MudPagination Count="@conversations.TotalPages"
                                  Selected="@currentPage"
                                  SelectedChanged="OnPageChanged"
                                  ShowFirstLast="true"
                                  ShowPrevNext="true" />
                </div>
            }
        }
        else
        {
            <div class="d-flex flex-column align-center justify-center" style="height: 300px;">
                <MudIcon Icon="@Icons.Material.Filled.PersonRemove" Style="font-size: 4rem; opacity: 0.3;" />
                <MudText Typo="Typo.h6" Color="Color.Secondary" Class="mt-4">
                    @L["No conversations assigned to you"]
                </MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    @L["Accept conversations from the Pending Conversations page to see them here"]
                </MudText>
                <MudButton Variant="Variant.Outlined"
                          Color="Color.Primary"
                          StartIcon="@Icons.Material.Filled.PendingActions"
                          Class="mt-4"
                          OnClick="NavigateToPendingConversations">
                    @L["View Pending Conversations"]
                </MudButton>
            </div>
        }
    </div>
</MudContainer>

<style>
    .mud-table-container {
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }
    
    .mud-table-container .mud-table-head {
        background-color: var(--mud-palette-surface-variant);
    }
    
    .text-truncate {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }
</style>

@code {
    private bool loading = true;
    private string searchString = string.Empty;
    private ConversationStatus? selectedStatus = null;
    private int? selectedPriority = null;
    private int currentPage = 1;
    private int pageSize = 12;
    private PaginatedData<ConversationDto>? conversations;
    private string? currentUserId;
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        
        await LoadMyConversations();
        await SetupSignalRConnection();
    }

    private async Task LoadMyConversations()
    {
        loading = true;
        try
        {
            if (string.IsNullOrEmpty(currentUserId))
            {
                conversations = null;
                Snackbar.Add("User not authenticated", Severity.Error);
                return;
            }

            var query = new GetMyActiveConversationsQuery(
                AgentId: currentUserId,
                SearchTerm: searchString,
                Status: selectedStatus,
                Priority: selectedPriority,
                Page: currentPage,
                PageSize: pageSize,
                SortBy: "LastActivityAt",
                SortDescending: true
            );

            var result = await Mediator.Send(query);
            if (result.Succeeded)
            {
                conversations = result.Data;
            }
            else
            {
                conversations = null;
                Snackbar.Add($"Error loading conversations: {string.Join(", ", result.Errors)}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            conversations = null;
            Snackbar.Add($"Error loading conversations: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error loading my conversations: {ex}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task OnSearch()
    {
        currentPage = 1;
        await LoadMyConversations();
    }

    private async Task OnStatusChanged()
    {
        currentPage = 1;
        await LoadMyConversations();
    }

    private async Task OnPriorityChanged()
    {
        currentPage = 1;
        await LoadMyConversations();
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadMyConversations();
    }

    private void NavigateToPendingConversations()
    {
        Navigation.NavigateTo("/agent/pending-conversations");
    }

    private async Task SetupSignalRConnection()
    {
        try
        {
            // Use the SignalRConnectionService to get the connection
            await SignalRService.EnsureConnectedAsync();
            _hubConnection = SignalRService.HubConnection;

            if (_hubConnection != null)
            {
                // Handle conversation status changes
                _hubConnection.On<string, ConversationStatus>("ConversationStatusChanged", OnConversationStatusChanged);
                
                // Handle conversation assignment changes
                _hubConnection.On<string, string, string>("ConversationAssigned", OnConversationAssigned);
                _hubConnection.On<string, string>("ConversationCompleted", OnConversationCompleted);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SignalR connection error: {ex.Message}");
        }
    }

    private async Task OnConversationStatusChanged(string conversationId, ConversationStatus newStatus)
    {
        await InvokeAsync(async () =>
        {
            try
            {
                var pastStatuses = new[] { ConversationStatus.Completed, ConversationStatus.Abandoned, ConversationStatus.Archived };
                
                if (conversations?.Items != null)
                {
                    var conversation = conversations.Items.FirstOrDefault(c => c.ConversationReference == conversationId);
                    if (conversation != null)
                    {
                        if (pastStatuses.Contains(newStatus))
                        {
                            // Conversation moved to past - remove from current view and refresh
                            await LoadMyConversations();
                            Snackbar.Add($"Conversation {conversationId} has been {newStatus.ToString().ToLower()}", Severity.Info);
                        }
                        else
                        {
                            // Update status in current view
                            conversation.Status = newStatus;
                        }
                        
                        StateHasChanged();
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error handling conversation status change: {ex.Message}");
            }
        });
    }

    private async Task OnConversationAssigned(string conversationId, string agentId, string agentName)
    {
        await InvokeAsync(async () =>
        {
            try
            {
                if (agentId == currentUserId)
                {
                    // Conversation assigned to current user - refresh the list
                    await LoadMyConversations();
                    Snackbar.Add($"New conversation {conversationId} assigned to you", Severity.Success);
                }
                else if (conversations?.Items != null)
                {
                    // Conversation assigned away from current user - remove it
                    var conversation = conversations.Items.FirstOrDefault(c => c.ConversationReference == conversationId);
                    if (conversation != null)
                    {
                        await LoadMyConversations();
                        Snackbar.Add($"Conversation {conversationId} reassigned to {agentName}", Severity.Info);
                    }
                }
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error handling conversation assignment: {ex.Message}");
            }
        });
    }

    private async Task OnConversationCompleted(string conversationId, string agentId)
    {
        await InvokeAsync(async () =>
        {
            try
            {
                if (conversations?.Items != null)
                {
                    var conversation = conversations.Items.FirstOrDefault(c => c.ConversationReference == conversationId);
                    if (conversation != null)
                    {
                        // Conversation completed - remove from active view
                        await LoadMyConversations();
                        if (agentId == currentUserId)
                        {
                            Snackbar.Add($"Conversation {conversationId} completed successfully", Severity.Success);
                        }
                    }
                }
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error handling conversation completion: {ex.Message}");
            }
        });
    }

    public async ValueTask DisposeAsync()
    {
        // SignalRConnectionService handles its own disposal
        // We just need to remove our event handlers
        if (_hubConnection is not null)
        {
            _hubConnection.Remove("ConversationStatusChanged");
            _hubConnection.Remove("ConversationAssigned");
            _hubConnection.Remove("ConversationCompleted");
        }
    }
}
