@layout MainLayout
@inherits LayoutComponentBase
@using CleanArchitecture.Blazor.Application.Common.Interfaces.Identity
@using CleanArchitecture.Blazor.Application.Common.Extensions
@using CleanArchitecture.Blazor.Server.UI.Components.Conversations
@using CleanArchitecture.Blazor.Server.UI.Components.Shared.Layout
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging
@inject IUserProfileState UserProfileState
@inject LayoutService LayoutService
@inject NavigationManager Navigation
@inject IDialogService DialogService
@implements IDisposable
@implements IAsyncDisposable
<MudLayout>
    <AuthorizeView>
        <NotAuthorized>
            <RedirectToLogin/>
        </NotAuthorized>
        <Authorized>
            <HeaderMenu NavigationMenuDrawerOpen="_navigationMenuDrawerOpen"
                        OpenSearchDialog="OpenSearchDialog"
                        IsDarkMode="@LayoutService.IsDarkMode"
                        ToggleNavigationMenuDrawer="ToggleNavigationMenuDrawer"
                        OnSettingClick="@(() => themeSettings?.OpenSetting())" />
            <NavigationMenu DrawerOpen="_navigationMenuDrawerOpen" Roles="@(UserProfile?.AssignedRoles??[])"
                            DrawerOpenChanged="NavigationMenuDrawerOpenChangedHandler"
                            OnSettingClick="@(() => themeSettings?.OpenSetting())"/>
            <ThemesMenu @ref="themeSettings" UserPreferences="@LayoutService.UserPreferences"
                        UserPreferencesChanged="LayoutService.UpdateUserPreferences"/>
           
            <MudMainContent>
                <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mb-4 mt-4">
                    <Microsoft.AspNetCore.Components.Web.ErrorBoundary @ref="ErrorBoundary">
                        <ChildContent>
                            <CascadingValue Value="@UserProfile">
                                @Body
                            </CascadingValue>
                        </ChildContent>
                        <ErrorContent Context="exception">
                            <CustomError Exception="exception"></CustomError>
                        </ErrorContent>
                    </Microsoft.AspNetCore.Components.Web.ErrorBoundary>
                </MudContainer>
            </MudMainContent>
          
            <UserLoginState />
            
            <!-- Global Escalation Popup Service -->
            <EscalationPopupService />
            <!-- Global Conversation Notifications -->
            <div style="position:fixed; bottom:16px; right:16px; z-index:1000;">
                <NotificationIndicator />
            </div>
        </Authorized>
    </AuthorizeView>
</MudLayout>


@code
{
    private bool _commandPaletteOpen;
    private bool _navigationMenuDrawerOpen = true;
    private bool _themingDrawerOpen;
    private UserProfile? UserProfile;
    private Microsoft.AspNetCore.Components.Web.ErrorBoundary? ErrorBoundary { set; get; }
    private ThemesMenu? themeSettings { set; get; }
    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState;
        UserProfileState.Changed += OnUserProfileChanged;
        
        var userId = state.User.GetUserId();
        if (state.User.Identity?.IsAuthenticated == true && !string.IsNullOrEmpty(userId))
        {
            await UserProfileState.EnsureInitializedAsync(userId);
            UserProfile = UserProfileState.Value;
        }
    }
     

    public void Dispose()
    {
        UserProfileState.Changed -= OnUserProfileChanged;
    }
    
    public async ValueTask DisposeAsync()
    {
        UserProfileState.Changed -= OnUserProfileChanged;
    GC.SuppressFinalize(this);
    await Task.CompletedTask;
    }
    
    protected override void OnParametersSet()
    {
        ResetBoundary();
    }
    
    private void OnUserProfileChanged(object? sender, UserProfile userProfile)
    {
        UserProfile = userProfile;
        InvokeAsync(StateHasChanged);
    }
    
    private void ResetBoundary()
    {
        // On each page navigation, reset any error state
        ErrorBoundary?.Recover();
    }

    protected void NavigationMenuDrawerOpenChangedHandler(bool state)
    {
        _navigationMenuDrawerOpen = state;
    }

    protected void ThemingDrawerOpenChangedHandler(bool state)
    {
        _themingDrawerOpen = state;
    }

    protected void ToggleNavigationMenuDrawer()
    {
        _navigationMenuDrawerOpen = !_navigationMenuDrawerOpen;
    }

    private async Task OpenSearchDialog()
    {
        if (!_commandPaletteOpen)
        {
            var options = new DialogOptions
            {
                NoHeader = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };

            var commandPalette =await DialogService.ShowAsync<SearchDialog>("", options);
            _commandPaletteOpen = true;

            await commandPalette.Result;
            _commandPaletteOpen = false;
        }
    }
}