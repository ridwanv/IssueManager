@using CleanArchitecture.Blazor.Application.Features.Conversations.DTOs
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using CleanArchitecture.Blazor.Server.UI.Services.SignalR
@inject IJSRuntime JS
@inject ILogger<EscalationPopupService> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SignalRConnectionService SignalRConnectionService
@implements IAsyncDisposable

<!-- Replace modal popup with toast container -->
<EscalationToastContainer @ref="_toastContainer" 
                          MaxToastCount="5"
                          AutoDismissTimeoutMs="30000"
                          OnEscalationAccepted="HandleEscalationAccepted"
                          OnEscalationDeclined="HandleEscalationDeclined" 
                          OnEscalationDismissed="HandleEscalationIgnored" />

@code {
    private EscalationToastContainer? _toastContainer;
    private HubConnection? _hubConnection;
    private IDisposable? _receiveEscalationPopupHandler;
    private IDisposable? _dismissEscalationPopupHandler;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await SignalRConnectionService.EnsureConnectedAsync();
            _hubConnection = SignalRConnectionService.HubConnection;

            if (_hubConnection != null && _hubConnection.State == HubConnectionState.Connected)
            {
                await SetupConnection();
            }
            else
            {
                Logger.LogWarning("EscalationPopupService: HubConnection not in a connected state. Current state: {State}", _hubConnection?.State);
                
                // Try to reconnect and setup again
                if (_hubConnection != null)
                {
                    try
                    {
                        await _hubConnection.StartAsync();
                        if (_hubConnection.State == HubConnectionState.Connected)
                        {
                            await SetupConnection();
                        }
                    }
                    catch (Exception reconnectEx)
                    {
                        Logger.LogError(reconnectEx, "Failed to reconnect SignalR for EscalationPopupService");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "EscalationPopupService initialization failed.");
        }
    }
    
    private async Task SetupConnection()
    {
        try
        {
            if (_hubConnection == null)
            {
                Logger.LogError("HubConnection is null in SetupConnection");
                return;
            }

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = user.FindFirst("sub")?.Value ?? user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            
            Logger.LogInformation("Setting up SignalR listeners for user {UserId}", userId);
            
            _receiveEscalationPopupHandler = _hubConnection.On<EscalationPopupDto>("ReceiveEscalationPopup", OnEscalationPopupReceived);
            _dismissEscalationPopupHandler = _hubConnection.On<string>("DismissEscalationPopup", OnEscalationPopupDismissed);
            
            // Join the agents group
            await _hubConnection.InvokeAsync("JoinAgentGroup");
            Logger.LogInformation("EscalationPopupService - Joined agent group successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "SetupConnection failed.");
        }
    }

    private async Task OnEscalationPopupReceived(EscalationPopupDto escalationData)
    {
        try
        {
            Logger.LogInformation("🔔 RECEIVED ESCALATION POPUP! Conversation {ConversationId}, Customer: {CustomerName}, Reason: {Reason}", 
                escalationData.ConversationReference, escalationData.CustomerName, escalationData.EscalationReason);
            
            if (_toastContainer != null)
            {
                await InvokeAsync(async () =>
                {
                    await _toastContainer.ShowToast(escalationData);
                    Logger.LogInformation("✅ Escalation toast displayed successfully for conversation {ConversationId}", escalationData.ConversationReference);
                });
            }
            else
            {
                Logger.LogError("❌ EscalationToastContainer component reference is null - cannot display toast!");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "💥 Error showing escalation toast for conversation {ConversationId}", escalationData.ConversationReference);
        }
    }

    private async Task OnEscalationPopupDismissed(string conversationId)
    {
        try
        {
            Logger.LogInformation("Dismissing escalation toast for conversation {ConversationId}", conversationId);
            
            if (_toastContainer != null)
            {
                await InvokeAsync(async () =>
                {
                    await _toastContainer.DismissToast(conversationId);
                });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error dismissing escalation toast for conversation {ConversationId}", conversationId);
        }
    }

    private async Task HandleEscalationAccepted(string conversationId)
    {
        Logger.LogInformation("Agent accepted escalation for conversation {ConversationId}", conversationId);
        
        // Notify hub that this agent accepted the escalation
        if (_hubConnection != null)
        {
            try
            {
                await _hubConnection.InvokeAsync("NotifyEscalationAccepted", conversationId);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error notifying escalation acceptance for conversation {ConversationId}", conversationId);
            }
        }
    }

    private Task HandleEscalationDeclined(string conversationId)
    {
        Logger.LogInformation("Agent declined escalation for conversation {ConversationId}", conversationId);
        // Could add logic to track declined escalations for analytics
        return Task.CompletedTask;
    }

    private Task HandleEscalationIgnored(string conversationId)
    {
        Logger.LogInformation("Agent ignored escalation for conversation {ConversationId}", conversationId);
        // Could add logic to track ignored escalations for analytics
        return Task.CompletedTask;
    }

    public ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            try
            {
                _receiveEscalationPopupHandler?.Dispose();
                _dismissEscalationPopupHandler?.Dispose();
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Error removing SignalR event handlers during disposal");
            }
        }
        
        GC.SuppressFinalize(this);
        return ValueTask.CompletedTask;
    }
}
