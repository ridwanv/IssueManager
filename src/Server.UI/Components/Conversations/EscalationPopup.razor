@using CleanArchitecture.Blazor.Application.Features.Conversations.DTOs
@using CleanArchitecture.Blazor.Application.Features.Conversations.Queries.GetConversationContext
@using CleanArchitecture.Blazor.Application.Features.Conversations.Commands.AcceptEscalation
@using CleanArchitecture.Blazor.Server.UI.Services.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@inject IMediator Mediator
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject SignalRConnectionService SignalRService

@if (_showPopup && _escalationData != null)
{
    <MudOverlay Visible="_showPopup" DarkBackground="true" ZIndex="9999" Class="escalation-popup-overlay">
        <MudPaper Class="escalation-popup pa-6" Style="max-width: 500px; margin: auto; border-radius: 16px; box-shadow: 0 24px 38px 3px rgba(0,0,0,.14);">
            <MudText Typo="Typo.h6" Class="mb-4" Color="Color.Primary">
                <MudIcon Icon="@Icons.Material.Filled.SupportAgent" Class="mr-2"/>
                Chat Escalation
                @if (_escalationData.Priority > 1)
                {
                    <MudChip T="string" Size="Size.Small" Color="@GetPriorityColor(_escalationData.Priority)" Variant="Variant.Filled" Class="ml-2">
                        @GetPriorityText(_escalationData.Priority)
                    </MudChip>
                }
            </MudText>
            
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.subtitle2" Class="mb-1">Customer Information</MudText>
                    <MudText Typo="Typo.body2"><strong>Name:</strong> @_escalationData.CustomerName</MudText>
                    <MudText Typo="Typo.body2"><strong>Phone:</strong> @_escalationData.PhoneNumber</MudText>
                </MudItem>
                
                <MudItem xs="12" Class="mt-3">
                    <MudText Typo="Typo.subtitle2" Class="mb-1">Escalation Details</MudText>
                    <MudText Typo="Typo.body2" Class="mb-2">
                        <strong>Reason:</strong> @_escalationData.EscalationReason
                    </MudText>
                    <MudText Typo="Typo.body2">
                        <strong>Duration:</strong> @FormatDuration(_escalationData.ConversationDuration) | 
                        <strong>Messages:</strong> @_escalationData.MessageCount
                    </MudText>
                </MudItem>

                @if (!string.IsNullOrEmpty(_escalationData.LastMessage))
                {
                    <MudItem xs="12" Class="mt-3">
                        <MudText Typo="Typo.subtitle2" Class="mb-1">Last Message</MudText>
                        <MudText Typo="Typo.body2" Class="text-muted" Style="font-style: italic;">
                            "@TruncateMessage(_escalationData.LastMessage)"
                        </MudText>
                    </MudItem>
                }
            </MudGrid>
            
            <MudCardActions Class="justify-space-between mt-4 pa-0">
                <MudText Typo="Typo.caption" Class="text-muted">
                    Escalated @FormatTimeAgo(_escalationData.EscalatedAt)
                </MudText>
                <MudStack Row="true" Spacing="2">
                    <MudButton OnClick="IgnoreEscalation" 
                              Variant="Variant.Text" 
                              Size="Size.Small"
                              Disabled="_processing">
                        Ignore
                    </MudButton>
                    <MudButton OnClick="DeclineEscalation" 
                              Variant="Variant.Outlined" 
                              Color="Color.Warning"
                              Size="Size.Small"
                              Disabled="_processing">
                        Decline
                    </MudButton>
                    <MudButton OnClick="AcceptEscalation" 
                              Variant="Variant.Filled" 
                              Color="Color.Primary"
                              Size="Size.Small"
                              Loading="_processing">
                        Accept & View
                    </MudButton>
                </MudStack>
            </MudCardActions>
        </MudPaper>
    </MudOverlay>
}

<style>
    .escalation-popup-overlay {
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .escalation-popup {
        animation: popup-appear 0.3s ease-out;
        max-height: 80vh;
        overflow-y: auto;
    }
    
    @@keyframes popup-appear {
        from {
            opacity: 0;
            transform: scale(0.8) translateY(-20px);
        }
        to {
            opacity: 1;
            transform: scale(1) translateY(0);
        }
    }
</style>

@code {
    private bool _showPopup = false;
    private bool _processing = false;
    private EscalationPopupDto? _escalationData;
    private int? _timeoutHandle;
    private HubConnection? _hubConnection;

    [Parameter] public EventCallback<string> OnEscalationAccepted { get; set; }
    [Parameter] public EventCallback<string> OnEscalationDeclined { get; set; }
    [Parameter] public EventCallback<string> OnEscalationIgnored { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Get SignalR connection for broadcasting escalation events
        await SignalRService.EnsureConnectedAsync();
        _hubConnection = SignalRService.HubConnection;
    }

    public async Task ShowEscalation(string conversationId)
    {
        try
        {
            var query = new GetConversationContextQuery { ConversationId = conversationId };
            var result = await Mediator.Send(query);

            if (result.Succeeded)
            {
                _escalationData = result.Data;
                _showPopup = true;
                StateHasChanged();
                
                await PlayNotificationSound();
                
                // Auto-dismiss after 60 seconds
                _timeoutHandle = await JS.InvokeAsync<int>("setTimeout", 
                    DotNetObjectReference.Create(this), 
                    nameof(AutoDismissTimeout), 60000);
            }
            else
            {
                Snackbar.Add("Failed to load escalation details.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error showing escalation: {ex.Message}", Severity.Error);
        }
    }

    public async Task ShowEscalation(EscalationPopupDto escalationData)
    {
        try
        {
            // Validate escalation data
            if (escalationData == null)
            {
                Snackbar.Add("Invalid escalation data received.", Severity.Error);
                return;
            }
            
            if (string.IsNullOrEmpty(escalationData.ConversationReference))
            {
                Snackbar.Add("Invalid escalation data: missing conversation reference.", Severity.Error);
                return;
            }
            
            _escalationData = escalationData;
            _showPopup = true;
            StateHasChanged();
            
            await PlayNotificationSound();
            
            // Auto-dismiss after 60 seconds
            _timeoutHandle = await JS.InvokeAsync<int>("setTimeout", 
                DotNetObjectReference.Create(this), 
                nameof(AutoDismissTimeout), 60000);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[EscalationPopup] Error showing escalation: {ex}");
            Snackbar.Add($"Error showing escalation: {ex.Message}", Severity.Error);
        }
    }

    public void HidePopup()
    {
        Console.WriteLine("[EscalationPopup] HidePopup called");
        
        try
        {
            Console.WriteLine("[EscalationPopup] Setting _showPopup to false...");
            _showPopup = false;
            
            Console.WriteLine("[EscalationPopup] Setting _escalationData to null...");
            _escalationData = null;
            
            Console.WriteLine("[EscalationPopup] Setting _processing to false...");
            _processing = false;
            
            Console.WriteLine("[EscalationPopup] Checking _timeoutHandle...");
            if (_timeoutHandle.HasValue)
            {
                Console.WriteLine("[EscalationPopup] Clearing timeout...");
                _ = JS.InvokeVoidAsync("clearTimeout", _timeoutHandle.Value);
                _timeoutHandle = null;
            }
            else
            {
                Console.WriteLine("[EscalationPopup] No timeout to clear");
            }
            
            Console.WriteLine("[EscalationPopup] Calling StateHasChanged...");
            StateHasChanged();
            Console.WriteLine("[EscalationPopup] HidePopup completed successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[EscalationPopup] Exception in HidePopup: {ex}");
            throw;
        }
    }

    private async Task AcceptEscalation()
    {
        try
        {
            Console.WriteLine("[EscalationPopup] AcceptEscalation called - ENTRY");
            
            // Check injected services first - each on separate lines to isolate null reference
            Console.WriteLine("[EscalationPopup] Checking Mediator...");
            var mediatorCheck = Mediator;
            
            Console.WriteLine("[EscalationPopup] Checking Snackbar...");
            var snackbarCheck = Snackbar;
            
            Console.WriteLine("[EscalationPopup] Checking _escalationData...");
            var escalationDataCheck = _escalationData;
            
            Console.WriteLine("[EscalationPopup] Checking _processing...");
            var processingCheck = _processing;
            
            if (mediatorCheck == null)
            {
                Console.WriteLine("[EscalationPopup] Mediator is null!");
                snackbarCheck?.Add("System error: Mediator service not available.", Severity.Error);
                return;
            }
            
            if (snackbarCheck == null)
            {
                Console.WriteLine("[EscalationPopup] Snackbar is null!");
                return;
            }
            
            if (escalationDataCheck == null)
            {
                Console.WriteLine("[EscalationPopup] _escalationData is null");
                snackbarCheck.Add("No escalation data available.", Severity.Error);
                return;
            }
            
            if (processingCheck)
            {
                Console.WriteLine("[EscalationPopup] Already processing");
                return;
            }
            
            Console.WriteLine("[EscalationPopup] Checking ConversationReference...");
            var conversationRef = escalationDataCheck.ConversationReference;
            
            // Validate required data
            if (string.IsNullOrEmpty(conversationRef))
            {
                Console.WriteLine("[EscalationPopup] ConversationReference is null or empty");
                snackbarCheck.Add("Invalid escalation data: missing conversation reference.", Severity.Error);
                return;
            }
            
            Console.WriteLine($"[EscalationPopup] Processing escalation for conversation: {conversationRef}");
            
            Console.WriteLine("[EscalationPopup] Setting _processing to true...");
            _processing = true;
            
            Console.WriteLine("[EscalationPopup] Calling StateHasChanged...");
            StateHasChanged();

            Console.WriteLine("[EscalationPopup] Creating command...");
            var command = new AcceptEscalationCommand { ConversationId = conversationRef };
            
            Console.WriteLine("[EscalationPopup] Sending command via Mediator...");
            var result = await mediatorCheck.Send(command);
            
            Console.WriteLine($"[EscalationPopup] Command result - Succeeded: {result?.Succeeded}");

            if (result?.Succeeded == true)
            {
                Console.WriteLine("[EscalationPopup] Command succeeded, broadcasting to SignalR");
                
                // Broadcast escalation acceptance to clear persistent notifications for ALL agents
                Console.WriteLine("[EscalationPopup] Checking hub connection...");
                if (_hubConnection?.State == HubConnectionState.Connected)
                {
                    Console.WriteLine("[EscalationPopup] Hub connection is available, invoking SignalR...");
                    await _hubConnection.InvokeAsync("BroadcastEscalationAccepted", conversationRef);
                    Console.WriteLine($"[EscalationPopup] Broadcasted escalation acceptance for {conversationRef}");
                }
                else
                {
                    Console.WriteLine($"[EscalationPopup] Hub connection not available or not connected. State: {_hubConnection?.State}");
                }
                
                Console.WriteLine("[EscalationPopup] Checking callback...");
                // Invoke the callback if it's set
                if (OnEscalationAccepted.HasDelegate)
                {
                    Console.WriteLine("[EscalationPopup] Invoking callback");
                    try
                    {
                        await OnEscalationAccepted.InvokeAsync(conversationRef);
                        Console.WriteLine("[EscalationPopup] Callback invoked successfully");
                    }
                    catch (Exception callbackEx)
                    {
                        Console.WriteLine($"[EscalationPopup] Exception in callback: {callbackEx}");
                        throw;
                    }
                }
                else
                {
                    Console.WriteLine("[EscalationPopup] No callback delegate set");
                }
                
                Console.WriteLine("[EscalationPopup] Checking Navigation...");
                // Navigate to the conversation page
                if (Navigation != null)
                {
                    Console.WriteLine($"[EscalationPopup] Navigating to conversation: {conversationRef}");
                    Navigation.NavigateTo($"/agent/conversations/{conversationRef}");
                    Console.WriteLine("[EscalationPopup] Navigation completed");
                }
                else
                {
                    Console.WriteLine("[EscalationPopup] Navigation service is null");
                }
                
                Console.WriteLine("[EscalationPopup] Calling HidePopup...");
                HidePopup();
                Console.WriteLine("[EscalationPopup] HidePopup completed");
            }
            else
            {
                var errorMessage = result?.Errors?.Any() == true 
                    ? string.Join(", ", result.Errors) 
                    : "Unknown error occurred";
                Console.WriteLine($"[EscalationPopup] Command failed: {errorMessage}");
                snackbarCheck.Add($"Failed to accept escalation: {errorMessage}", Severity.Error);
                _processing = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[EscalationPopup] Exception in AcceptEscalation: {ex}");
            Console.WriteLine($"[EscalationPopup] Exception StackTrace: {ex.StackTrace}");
            
            // Check if the exception is coming from a null reference
            if (ex is NullReferenceException)
            {
                Console.WriteLine("[EscalationPopup] This is a null reference exception");
            }
            
            Snackbar?.Add($"Error accepting escalation: {ex.Message}", Severity.Error);
            _processing = false;
            StateHasChanged();
        }
    }

    private async Task DeclineEscalation()
    {
        if (_escalationData == null) return;
        
        // Invoke the callback if it's set
        if (OnEscalationDeclined.HasDelegate)
        {
            await OnEscalationDeclined.InvokeAsync(_escalationData.ConversationReference);
        }
        HidePopup();
    }

    private async Task IgnoreEscalation()
    {
        if (_escalationData == null) return;
        
        try
        {
            // Broadcast persistent escalation notification to all agents via SignalR
            if (_hubConnection?.State == HubConnectionState.Connected)
            {
                await _hubConnection.InvokeAsync("BroadcastEscalationPersistentNotification", 
                    _escalationData.ConversationReference,
                    _escalationData.EscalationReason,
                    _escalationData.PhoneNumber,
                    _escalationData.Priority,
                    _escalationData.EscalatedAt);
                
                Console.WriteLine($"[EscalationPopup] Broadcasted persistent notification for escalation {_escalationData.ConversationReference}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[EscalationPopup] Error broadcasting persistent notification: {ex.Message}");
        }
        
        // Invoke the callback if it's set
        if (OnEscalationIgnored.HasDelegate)
        {
            await OnEscalationIgnored.InvokeAsync(_escalationData.ConversationReference);
        }
        HidePopup();
    }

    [JSInvokable]
    public void AutoDismissTimeout()
    {
        if (_escalationData != null)
        {
            _ = IgnoreEscalation();
        }
    }

    private async Task PlayNotificationSound()
    {
        try
        {
            await JS.InvokeVoidAsync("playNotificationSound", "escalation");
        }
        catch
        {
            // Ignore JS errors for sound playback
        }
    }

    private static Color GetPriorityColor(int priority) => priority switch
    {
        3 => Color.Error,
        2 => Color.Warning,
        _ => Color.Info
    };

    private static string GetPriorityText(int priority) => priority switch
    {
        3 => "CRITICAL",
        2 => "HIGH",
        _ => "STANDARD"
    };

    private static string FormatDuration(TimeSpan duration)
    {
        if (duration.TotalHours >= 1)
            return $"{(int)duration.TotalHours}h {duration.Minutes}m";
        return $"{duration.Minutes}m {duration.Seconds}s";
    }

    private static string FormatTimeAgo(DateTime timestamp)
    {
        var elapsed = DateTime.UtcNow - timestamp;
        if (elapsed.TotalMinutes < 1) return "just now";
        if (elapsed.TotalMinutes < 60) return $"{(int)elapsed.TotalMinutes}m ago";
        if (elapsed.TotalHours < 24) return $"{(int)elapsed.TotalHours}h ago";
        return timestamp.ToString("MMM d, HH:mm");
    }

    private static string TruncateMessage(string message, int maxLength = 80)
    {
        if (string.IsNullOrEmpty(message) || message.Length <= maxLength)
            return message ?? string.Empty;
        
        return message[..(maxLength - 3)] + "...";
    }
}