@if (Visible)
{
    <div class="typing-indicator-container">
        <div class="typing-indicator">
            <div class="typing-dots">
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            </div>
            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="ml-2">
                Customer is typing...
            </MudText>
        </div>
    </div>
}

<style>
    .typing-indicator-container {
        display: flex;
        justify-content: flex-start;
        margin: 8px 0;
    }

    .typing-indicator {
        display: flex;
        align-items: center;
        background-color: var(--mud-palette-surface);
        border: 1px solid var(--mud-palette-lines-default);
        border-radius: 18px;
        padding: 8px 12px;
        max-width: 70%;
        animation: fadeIn 0.3s ease-in-out;
    }

    .typing-dots {
        display: flex;
        gap: 4px;
    }

    .typing-dot {
        width: 8px;
        height: 8px;
        background-color: var(--mud-palette-text-secondary);
        border-radius: 50%;
        animation: typing 1.4s ease-in-out infinite both;
    }

    .typing-dot:nth-child(1) {
        animation-delay: -0.32s;
    }

    .typing-dot:nth-child(2) {
        animation-delay: -0.16s;
    }

    .typing-dot:nth-child(3) {
        animation-delay: 0s;
    }

    @@keyframes typing {
        0%, 80%, 100% {
            transform: scale(0.8);
            opacity: 0.5;
        }
        40% {
            transform: scale(1);
            opacity: 1;
        }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

@code {
    [Parameter] public string ConversationId { get; set; } = string.Empty;
    [Parameter] public bool Visible { get; set; }
}