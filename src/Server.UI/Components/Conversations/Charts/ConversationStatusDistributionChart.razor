@using ApexCharts
@using CleanArchitecture.Blazor.Domain.Enums

@inject IStringLocalizer<ConversationStatusDistributionChart> L
@inject LayoutService LayoutService

@if (StatusData?.Any() == true && ChartData?.Any() == true && Options != null && ChartData.All(d => d.Value > 0))
{
    <ApexChart TItem="StatusChartData" 
               Options="Options" 
               @ref="Chart"
               Height="320">
        
        <ApexPointSeries TItem="StatusChartData"
                         Items="ChartData"
                         Name="Conversations"
                         XValue="@(e => e.Label ?? "Unknown")"
                         YValue="@(e => e.Value > 0 ? (decimal)e.Value : 0m)"
                         SeriesType="SeriesType.Donut" />
    </ApexChart>
}
else
{
    <div class="d-flex justify-center align-center" style="height: 320px;">
        <MudText Typo="Typo.body1" Color="Color.Default">@L["No data available"]</MudText>
    </div>
}

@code {
    [Parameter] public Dictionary<ConversationStatus, int> StatusData { get; set; } = default!;

    private ApexChart<StatusChartData>? Chart;
    private ApexChartOptions<StatusChartData> Options = new();
    private List<StatusChartData> ChartData = new();

    private readonly Dictionary<ConversationStatus, string> StatusColors = new()
    {
        { ConversationStatus.Active, "#2196F3" },
        { ConversationStatus.Completed, "#4CAF50" },
        { ConversationStatus.Abandoned, "#FF9800" },
        { ConversationStatus.Archived, "#757575" }
    };

    private bool _shouldRender = false;

    protected override Task OnParametersSetAsync()
    {
        _shouldRender = false;
        
        if (StatusData?.Any() == true)
        {
            try
            {
                PrepareChartData();
                SetupChartOptions();
                _shouldRender = ChartData?.Any() == true && Options != null;
            }
            catch (Exception ex)
            {
                // Log the exception if needed
                Console.WriteLine($"Chart setup error: {ex.Message}");
                _shouldRender = false;
            }
        }
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Let the chart handle its own rendering lifecycle
        // Remove manual RenderAsync call to prevent null reference exceptions
        _shouldRender = false;
        await base.OnAfterRenderAsync(firstRender);
    }

    private void PrepareChartData()
    {
        if (StatusData?.Any() != true)
        {
            ChartData = new List<StatusChartData>();
            return;
        }

        ChartData = StatusData.Select(kvp => new StatusChartData
        {
            Label = GetStatusLabel(kvp.Key),
            Value = kvp.Value,
            Status = kvp.Key
        }).Where(d => d.Value > 0).ToList(); // Only include non-zero values
    }

    private string GetStatusLabel(ConversationStatus status)
    {
        try
        {
            return status switch
            {
                ConversationStatus.Active => L?["Active"] ?? "Active",
                ConversationStatus.Completed => L?["Completed"] ?? "Completed",
                ConversationStatus.Abandoned => L?["Abandoned"] ?? "Abandoned",
                ConversationStatus.Archived => L?["Archived"] ?? "Archived",
                _ => status.ToString()
            };
        }
        catch
        {
            return status.ToString();
        }
    }

    private void SetupChartOptions()
    {
        if (ChartData?.Any() != true) return;
        
        var isDarkMode = LayoutService?.IsDarkMode ?? false;
        
        Options = new ApexChartOptions<StatusChartData>
        {
            Theme = new Theme { Mode = isDarkMode ? Mode.Dark : Mode.Light },
            Chart = new Chart { Background = "transparent" },
            Colors = ChartData.Select(d => StatusColors.GetValueOrDefault(d.Status, "#9E9E9E")).ToList(),
            Legend = new Legend
            {
                Position = LegendPosition.Bottom,
                HorizontalAlign = ApexCharts.Align.Center
            },
            Tooltip = new Tooltip
            {
                Y = new TooltipY
                {
                    Formatter = @"function(value) { return value + ' conversations'; }"
                }
            },
            PlotOptions = new PlotOptions
            {
                Pie = new PlotOptionsPie
                {
                    Donut = new PlotOptionsDonut
                    {
                        Size = "65%",
                        Labels = new DonutLabels
                        {
                            Show = true,
                            Total = new DonutLabelTotal
                            {
                                Show = true,
                                Label = L?["Total"] ?? "Total",
                                Formatter = @"function(opts) { 
                                    return opts.config.series.reduce((a, b) => a + b, 0) + ' conversations'; 
                                }"
                            }
                        }
                    }
                }
            },
            DataLabels = new DataLabels
            {
                Enabled = true,
                Formatter = @"function(val, opts) { 
                    return Math.round(val) + '%'; 
                }"
            }
        };
    }

    private class StatusChartData
    {
        public string Label { get; set; } = string.Empty;
        public int Value { get; set; }
        public ConversationStatus Status { get; set; }
    }
}
