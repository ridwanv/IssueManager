@using ApexCharts
@using CleanArchitecture.Blazor.Application.Features.Conversations.Queries.GetConversationPerformanceStats

@inject IStringLocalizer<SentimentTrendsChart> L
@inject LayoutService LayoutService

@if (SentimentTrendsData?.Any() == true)
{
    <ApexChart TItem="ConversationChartDataPoint" 
               Options="Options" 
               @ref="Chart"
               Height="380">
        
        <ApexPointSeries TItem="ConversationChartDataPoint"
                         Items="SentimentTrendsData"
                         Name="@L["Average Sentiment"]"
                         XValue="@(e => e.Label)"
                         YValue="@(e => (decimal)e.Value)"
                         SeriesType="SeriesType.Line" />
    </ApexChart>
}
else
{
    <div class="d-flex justify-center align-center" style="height: 380px;">
        <MudText Typo="Typo.body1" Color="Color.Default">@L["No data available"]</MudText>
    </div>
}

@code {
    [Parameter] public List<ConversationChartDataPoint> SentimentTrendsData { get; set; } = default!;

    private ApexChart<ConversationChartDataPoint>? Chart;
    private ApexChartOptions<ConversationChartDataPoint> Options = new();

    protected override Task OnParametersSetAsync()
    {
        if (SentimentTrendsData?.Any() == true)
        {
            SetupChartOptions();
        }
        return Task.CompletedTask;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        // Let ApexChart handle its own rendering lifecycle
        // Manual Chart.RenderAsync() calls can cause race conditions and NullReferenceException
        return Task.CompletedTask;
    }

    private void SetupChartOptions()
    {
        var isDarkMode = LayoutService?.IsDarkMode ?? false;
        var primaryColor = isDarkMode ? "#81C784" : "#4CAF50";
        
        Options = new ApexChartOptions<ConversationChartDataPoint>
        {
            Theme = new Theme { Mode = isDarkMode ? Mode.Dark : Mode.Light },
            Chart = new Chart 
            { 
                Background = "transparent",
                Toolbar = new Toolbar { Show = true }
            },
            Colors = new List<string> { primaryColor },
            Stroke = new Stroke
            {
                Curve = Curve.Smooth,
                Width = 3
            },
            Xaxis = new XAxis
            {
                Type = XAxisType.Category,
                Labels = new XAxisLabels
                {
                    Rotate = -45,
                    MaxHeight = 120
                }
            },
            Yaxis = new List<YAxis>
            {
                new YAxis
                {
                    Title = new AxisTitle { Text = L["Sentiment Score"].ToString() },
                    Min = -1,
                    Max = 1,
                    Labels = new YAxisLabels
                    {
                        Formatter = @"function (value) {
                            return value.toFixed(2);
                        }"
                    }
                }
            },
            Tooltip = new Tooltip
            {
                Y = new TooltipY
                {
                    Formatter = @"function(value) { 
                        return 'Sentiment: ' + value.toFixed(2); 
                    }"
                }
            },
            DataLabels = new DataLabels
            {
                Enabled = false
            },
            Grid = new Grid
            {
                BorderColor = isDarkMode ? "#424242" : "#e0e0e0",
                StrokeDashArray = 3
            }
        };
    }
}
