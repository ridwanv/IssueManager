@using ApexCharts
@using CleanArchitecture.Blazor.Application.Features.Issues.Queries.GetPerformanceStats
@using Microsoft.Extensions.Localization
@using CleanArchitecture.Blazor.Server.UI.Services
@using MudBlazor

@inject IStringLocalizer<VolumeTrendsChart> L
@inject LayoutService LayoutService

@if (VolumeData?.Any() == true)
{
    <ApexChart TItem="ChartDataPoint" 
               Options="Options" 
               @ref="Chart"
               Height="380">
        
        <ApexPointSeries TItem="ChartDataPoint"
                         Items="VolumeData"
                         Name="@L["Issues Created"]"
                         XValue="@(e => e.Label)"
                         YValue="@(e => (decimal)e.Value)"
                         SeriesType="SeriesType.Area" />
    </ApexChart>
}
else
{
    <div class="d-flex justify-center align-center" style="height: 380px;">
        <MudText Typo="Typo.body1" Color="Color.Default">@L["No data available"]</MudText>
    </div>
}

@code {
    [Parameter] public List<ChartDataPoint> VolumeData { get; set; } = default!;

    private ApexChart<ChartDataPoint>? Chart;
    private ApexChartOptions<ChartDataPoint> Options = new();

    private bool _shouldRender = false;

    protected override Task OnParametersSetAsync()
    {
        if (VolumeData?.Any() == true)
        {
            SetupChartOptions();
            _shouldRender = true;
        }
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_shouldRender && Chart != null)
        {
            try
            {
                await Chart.RenderAsync();
            }
            catch (NullReferenceException)
            {
                // Chart may not be fully initialized yet; ignore and try again on next render
            }
            _shouldRender = false;
        }
    }

    private void SetupChartOptions()
    {
        var isDarkMode = LayoutService.IsDarkMode;
        var primaryColor = isDarkMode ? "#90CAF9" : "#1976D2";
        
        Options = new ApexChartOptions<ChartDataPoint>
        {
            Theme = new Theme { Mode = isDarkMode ? Mode.Dark : Mode.Light },
            Chart = new Chart 
            { 
                Background = "transparent",
                Toolbar = new Toolbar { Show = true }
            },
            Colors = new List<string> { primaryColor },
            Stroke = new Stroke
            {
                Curve = Curve.Smooth,
                Width = 3
            },
            Fill = new Fill
            {
                Type = new List<FillType> { FillType.Gradient },
                Gradient = new FillGradient
                {
                    Type = GradientType.Vertical,
                    ShadeIntensity = 1,
                    OpacityFrom = 0.7,
                    OpacityTo = 0.1,
                    GradientToColors = new List<string> { primaryColor },
                    Stops = new List<double> { 0, 100 }
                }
            },
            Xaxis = new XAxis
            {
                Type = XAxisType.Category,
                Labels = new XAxisLabels
                {
                    Rotate = -45,
                    MaxHeight = 120
                }
            },
            Yaxis = new List<YAxis>
            {
                new YAxis
                {
                    Title = new AxisTitle { Text = L["Number of Issues"].ToString() },
                    Labels = new YAxisLabels
                    {
                        Formatter = @"function (value) {
                            return Math.round(value);
                        }"
                    }
                }
            },
            Tooltip = new Tooltip
            {
                Y = new TooltipY
                {
                    Formatter = @"function(value) { 
                        return Math.round(value) + ' issues'; 
                    }"
                }
            },
            DataLabels = new DataLabels
            {
                Enabled = false
            },
            Grid = new Grid
            {
                BorderColor = isDarkMode ? "#424242" : "#e0e0e0",
                StrokeDashArray = 3
            }
        };
    }
}
