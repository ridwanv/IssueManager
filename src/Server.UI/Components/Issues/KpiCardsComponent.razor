@using CleanArchitecture.Blazor.Application.Features.Issues.Queries.GetDashboardMetrics
@using MudBlazor
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<KpiCardsComponent> L

<MudGrid>
    <!-- Total Open Issues -->
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="pa-4 text-center" Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;" Elevation="4">
            <MudIcon Icon="@Icons.Material.Filled.Assignment" Size="Size.Large" Color="Color.Inherit" Class="mb-2" />
            <MudText Typo="Typo.h4" Color="Color.Inherit">@Metrics.TotalOpenIssues</MudText>
            <MudText Typo="Typo.body2" Color="Color.Inherit">@L["Open Issues"]</MudText>
            @if (Metrics.TrendPercentage != 0)
            {
                <MudChip T="string" Size="Size.Small" Color="GetTrendColor(Metrics.TrendDirection)" Variant="Variant.Filled" Class="mt-1">
                    @Metrics.TrendIndicator
                </MudChip>
            }
        </MudPaper>
    </MudItem>

    <!-- Critical Issues -->
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="pa-4 text-center" Style="background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%); color: #333;" Elevation="4">
            <MudIcon Icon="@Icons.Material.Filled.PriorityHigh" Size="Size.Large" Color="Color.Error" Class="mb-2" />
            <MudText Typo="Typo.h4" Color="Color.Error">@Metrics.CriticalIssues</MudText>
            <MudText Typo="Typo.body2" Color="Color.Error">@L["Critical Issues"]</MudText>
            @if (Metrics.TotalOpenIssues > 0)
            {
                <MudText Typo="Typo.caption" Color="Color.Default">
                    @(Math.Round((double)Metrics.CriticalIssues / Metrics.TotalOpenIssues * 100, 1))% @L["of total"]
                </MudText>
            }
        </MudPaper>
    </MudItem>

    <!-- New Issues (24h) -->
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="pa-4 text-center" Style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white;" Elevation="4">
            <MudIcon Icon="@Icons.Material.Filled.AddCircle" Size="Size.Large" Color="Color.Inherit" Class="mb-2" />
            <MudText Typo="Typo.h4" Color="Color.Inherit">@Metrics.NewIssuesLast24Hours</MudText>
            <MudText Typo="Typo.body2" Color="Color.Inherit">@L["New (24h)"]</MudText>
            <MudText Typo="Typo.caption" Color="Color.Inherit">
                @L["Resolved"]: @Metrics.ResolvedLast24Hours
            </MudText>
        </MudPaper>
    </MudItem>

    <!-- Average Resolution Time -->
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="pa-4 text-center" Style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); color: white;" Elevation="4">
            <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Large" Color="Color.Inherit" Class="mb-2" />
            <MudText Typo="Typo.h4" Color="Color.Inherit">@Metrics.AverageResolutionTimeFormatted</MudText>
            <MudText Typo="Typo.body2" Color="Color.Inherit">@L["Avg Resolution"]</MudText>
            <MudText Typo="Typo.caption" Color="Color.Inherit">
                @L["SLA"]: @Metrics.SlaComplianceFormatted
            </MudText>
        </MudPaper>
    </MudItem>
</MudGrid>

<!-- Additional KPI Row -->
<MudGrid Class="mt-2">
    <!-- SLA Compliance -->
    <MudItem xs="12" sm="6" md="3">
        <MudCard>
            <MudCardContent Class="pa-4 text-center">
                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" 
                        Size="Size.Large" 
                        Color="@GetSlaColor(Metrics.SlaCompliancePercentage)" 
                        Class="mb-2" />
                <MudText Typo="Typo.h6">@Metrics.SlaComplianceFormatted</MudText>
                <MudText Typo="Typo.body2" Color="Color.Default">@L["SLA Compliance"]</MudText>
                <MudProgressLinear Value="@Metrics.SlaCompliancePercentage" 
                                  Color="@GetSlaColor(Metrics.SlaCompliancePercentage)" 
                                  Class="mt-2" />
            </MudCardContent>
        </MudCard>
    </MudItem>

    <!-- Status Summary -->
    <MudItem xs="12" sm="6" md="9">
        <MudCard>
            <MudCardContent Class="pa-4">
                <MudText Typo="Typo.h6" Class="mb-3">@L["Status Summary"]</MudText>
                <MudGrid>
                    @foreach (var status in Metrics.StatusDistribution.OrderByDescending(s => s.Value))
                    {
                        <MudItem xs="6" sm="4" md="3">
                            <MudStack AlignItems="AlignItems.Center" Spacing="1">
                                <MudChip T="string" Color="@GetStatusColor(status.Key)" Size="Size.Small" Variant="Variant.Filled">
                                    @status.Value
                                </MudChip>
                                <MudText Typo="Typo.caption">@status.Key.ToString()</MudText>
                            </MudStack>
                        </MudItem>
                    }
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public DashboardMetricsDto Metrics { get; set; } = default!;

    private Color GetTrendColor(string direction) => direction switch
    {
        "up" => Color.Success,
        "down" => Color.Error,
        _ => Color.Default
    };

    private Color GetSlaColor(double percentage) => percentage switch
    {
        >= 95 => Color.Success,
        >= 80 => Color.Warning,
        _ => Color.Error
    };

    private Color GetStatusColor(CleanArchitecture.Blazor.Domain.Enums.IssueStatus status)
    {
        return status switch
        {
            CleanArchitecture.Blazor.Domain.Enums.IssueStatus.New => Color.Primary,
            CleanArchitecture.Blazor.Domain.Enums.IssueStatus.InProgress => Color.Info,
            CleanArchitecture.Blazor.Domain.Enums.IssueStatus.Resolved => Color.Success,
            CleanArchitecture.Blazor.Domain.Enums.IssueStatus.Closed => Color.Success,
            CleanArchitecture.Blazor.Domain.Enums.IssueStatus.OnHold => Color.Dark,
            _ => Color.Default
        };
    }
}
