@using ApexCharts
@using CleanArchitecture.Blazor.Domain.Enums
@using Microsoft.Extensions.Localization
@using CleanArchitecture.Blazor.Server.UI.Services
@using MudBlazor

@inject IStringLocalizer<PriorityDistributionChart> L
@inject LayoutService LayoutService

@if (PriorityData?.Any() == true)
{
    <ApexChart TItem="PriorityChartData" 
               Options="Options" 
               @ref="Chart"
               Height="320">
        
        <ApexPointSeries TItem="PriorityChartData"
                         Items="ChartData"
                         Name="Issues"
                         XValue="@(e => e.Label)"
                         YValue="@(e => (decimal)e.Value)"
                         SeriesType="SeriesType.Pie" />
    </ApexChart>
}
else
{
    <div class="d-flex justify-center align-center" style="height: 320px;">
        <MudText Typo="Typo.body1" Color="Color.Default">@L["No data available"]</MudText>
    </div>
}

@code {
    [Parameter] public Dictionary<IssuePriority, int> PriorityData { get; set; } = default!;

    private ApexChart<PriorityChartData>? Chart;
    private ApexChartOptions<PriorityChartData> Options = new();
    private List<PriorityChartData> ChartData = new();

    private readonly Dictionary<IssuePriority, string> PriorityColors = new()
    {
        { IssuePriority.Low, "#4CAF50" },
        { IssuePriority.Medium, "#FF9800" },
        { IssuePriority.High, "#FF5722" },
        { IssuePriority.Critical, "#F44336" }
    };

    private bool _shouldRender = false;

    protected override Task OnParametersSetAsync()
    {
        if (PriorityData?.Any() == true)
        {
            PrepareChartData();
            SetupChartOptions();
            _shouldRender = true;
        }
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_shouldRender && Chart != null)
        {
            await Chart.RenderAsync();
            _shouldRender = false;
        }
    }

    private void PrepareChartData()
    {
        ChartData = PriorityData.Select(kvp => new PriorityChartData
        {
            Label = kvp.Key.ToString(),
            Value = kvp.Value,
            Priority = kvp.Key
        }).ToList();
    }

    private void SetupChartOptions()
    {
        var isDarkMode = LayoutService.IsDarkMode;
        
        Options = new ApexChartOptions<PriorityChartData>
        {
            Theme = new Theme { Mode = isDarkMode ? Mode.Dark : Mode.Light },
            Chart = new Chart { Background = "transparent" },
            Colors = ChartData.Select(d => PriorityColors.GetValueOrDefault(d.Priority, "#9E9E9E")).ToList(),
            Legend = new Legend
            {
                Position = LegendPosition.Bottom,
                HorizontalAlign = ApexCharts.Align.Center
            },
            Tooltip = new Tooltip
            {
                Y = new TooltipY
                {
                    Formatter = @"function(value) { return value + ' issues'; }"
                }
            },
            DataLabels = new DataLabels
            {
                Enabled = true,
                Formatter = @"function(val, opts) { 
                    return Math.round(val) + '%'; 
                }"
            }
        };
    }

    private class PriorityChartData
    {
        public string Label { get; set; } = string.Empty;
        public int Value { get; set; }
        public IssuePriority Priority { get; set; }
    }
}
