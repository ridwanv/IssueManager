name: Bot Service CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/Bot/**'
      - '.github/workflows/bot-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/Bot/**'
      - '.github/workflows/bot-ci-cd.yml'

env:
  DOTNET_VERSION: '9.0.x'
  BOT_PROJECT_PATH: 'src/Bot/IssueManager.Bot.csproj'
  ARTIFACT_NAME: 'whatsapp-bot-service'

jobs:
  build-and-test:
    name: Build and Test Bot Service
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.BOT_PROJECT_PATH }}
      
    - name: Build Bot service
      run: dotnet build ${{ env.BOT_PROJECT_PATH }} --no-restore --configuration Release
      
    - name: Run Bot service tests
      run: |
        # Run infrastructure tests that include Bot components
        dotnet test tests/Infrastructure.UnitTests/Infrastructure.UnitTests.csproj --no-build --verbosity normal --configuration Release
        
    - name: Publish Bot service
      run: dotnet publish ${{ env.BOT_PROJECT_PATH }} --no-build --configuration Release --output ./bot-publish
      
    - name: Upload Bot service artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ./bot-publish
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.BOT_PROJECT_PATH }}
      
    - name: Run security audit
      run: dotnet list ${{ env.BOT_PROJECT_PATH }} package --vulnerable --include-transitive || true
      
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./src/Bot/
        base: main
        head: HEAD

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ./bot-service
        
    - name: Deploy to staging
      run: |
        echo "Deploying Bot service to staging environment"
        # Add your staging deployment commands here
        # Example: Azure App Service, Docker, etc.
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ./bot-service
        
    - name: Deploy to production
      run: |
        echo "Deploying Bot service to production environment"
        # Add your production deployment commands here
        # Example: Azure App Service, Docker, etc.